// Code generated by protoc-gen-go. DO NOT EDIT.
// source: jasper.proto

package internal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogType int32

const (
	LogType_LOGUNKNOWN       LogType = 0
	LogType_LOGBUILDLOGGERV2 LogType = 1
	LogType_LOGBUILDLOGGERV3 LogType = 2
	LogType_LOGDEFAULT       LogType = 3
	LogType_LOGFILE          LogType = 4
	LogType_LOGINHERIT       LogType = 5
	LogType_LOGSPLUNK        LogType = 6
	LogType_LOGSUMOLOGIC     LogType = 7
	LogType_LOGINMEMORY      LogType = 8
)

var LogType_name = map[int32]string{
	0: "LOGUNKNOWN",
	1: "LOGBUILDLOGGERV2",
	2: "LOGBUILDLOGGERV3",
	3: "LOGDEFAULT",
	4: "LOGFILE",
	5: "LOGINHERIT",
	6: "LOGSPLUNK",
	7: "LOGSUMOLOGIC",
	8: "LOGINMEMORY",
}

var LogType_value = map[string]int32{
	"LOGUNKNOWN":       0,
	"LOGBUILDLOGGERV2": 1,
	"LOGBUILDLOGGERV3": 2,
	"LOGDEFAULT":       3,
	"LOGFILE":          4,
	"LOGINHERIT":       5,
	"LOGSPLUNK":        6,
	"LOGSUMOLOGIC":     7,
	"LOGINMEMORY":      8,
}

func (x LogType) String() string {
	return proto.EnumName(LogType_name, int32(x))
}

func (LogType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{0}
}

type FilterSpecifications int32

const (
	FilterSpecifications_ALL        FilterSpecifications = 0
	FilterSpecifications_RUNNING    FilterSpecifications = 1
	FilterSpecifications_TERMINATED FilterSpecifications = 2
	FilterSpecifications_FAILED     FilterSpecifications = 3
	FilterSpecifications_SUCCESSFUL FilterSpecifications = 4
)

var FilterSpecifications_name = map[int32]string{
	0: "ALL",
	1: "RUNNING",
	2: "TERMINATED",
	3: "FAILED",
	4: "SUCCESSFUL",
}

var FilterSpecifications_value = map[string]int32{
	"ALL":        0,
	"RUNNING":    1,
	"TERMINATED": 2,
	"FAILED":     3,
	"SUCCESSFUL": 4,
}

func (x FilterSpecifications) String() string {
	return proto.EnumName(FilterSpecifications_name, int32(x))
}

func (FilterSpecifications) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{1}
}

type Signals int32

const (
	Signals_UNKNOWN Signals = 0
	Signals_SIGTERM Signals = 1
	Signals_SIGKILL Signals = 2
	Signals_SIGHUP  Signals = 3
	Signals_SIGINT  Signals = 4
	Signals_SIGUSR1 Signals = 5
	Signals_SIGUSR2 Signals = 6
)

var Signals_name = map[int32]string{
	0: "UNKNOWN",
	1: "SIGTERM",
	2: "SIGKILL",
	3: "SIGHUP",
	4: "SIGINT",
	5: "SIGUSR1",
	6: "SIGUSR2",
}

var Signals_value = map[string]int32{
	"UNKNOWN": 0,
	"SIGTERM": 1,
	"SIGKILL": 2,
	"SIGHUP":  3,
	"SIGINT":  4,
	"SIGUSR1": 5,
	"SIGUSR2": 6,
}

func (x Signals) String() string {
	return proto.EnumName(Signals_name, int32(x))
}

func (Signals) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{2}
}

type ArchiveFormat int32

const (
	ArchiveFormat_ARCHIVEUNKNOWN ArchiveFormat = 0
	ArchiveFormat_ARCHIVEAUTO    ArchiveFormat = 1
	ArchiveFormat_ARCHIVETARBALL ArchiveFormat = 2
	ArchiveFormat_ARCHIVEZIP     ArchiveFormat = 3
)

var ArchiveFormat_name = map[int32]string{
	0: "ARCHIVEUNKNOWN",
	1: "ARCHIVEAUTO",
	2: "ARCHIVETARBALL",
	3: "ARCHIVEZIP",
}

var ArchiveFormat_value = map[string]int32{
	"ARCHIVEUNKNOWN": 0,
	"ARCHIVEAUTO":    1,
	"ARCHIVETARBALL": 2,
	"ARCHIVEZIP":     3,
}

func (x ArchiveFormat) String() string {
	return proto.EnumName(ArchiveFormat_name, int32(x))
}

func (ArchiveFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{3}
}

type Logger struct {
	LogType              LogType  `protobuf:"varint,1,opt,name=log_type,json=logType,proto3,enum=jasper.LogType" json:"log_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Logger) Reset()         { *m = Logger{} }
func (m *Logger) String() string { return proto.CompactTextString(m) }
func (*Logger) ProtoMessage()    {}
func (*Logger) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{0}
}
func (m *Logger) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Logger.Unmarshal(m, b)
}
func (m *Logger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Logger.Marshal(b, m, deterministic)
}
func (m *Logger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Logger.Merge(m, src)
}
func (m *Logger) XXX_Size() int {
	return xxx_messageInfo_Logger.Size(m)
}
func (m *Logger) XXX_DiscardUnknown() {
	xxx_messageInfo_Logger.DiscardUnknown(m)
}

var xxx_messageInfo_Logger proto.InternalMessageInfo

func (m *Logger) GetLogType() LogType {
	if m != nil {
		return m.LogType
	}
	return LogType_LOGUNKNOWN
}

type OutputOptions struct {
	Loggers               []*Logger `protobuf:"bytes,1,rep,name=loggers,proto3" json:"loggers,omitempty"`
	SuppressOutput        bool      `protobuf:"varint,2,opt,name=suppress_output,json=suppressOutput,proto3" json:"suppress_output,omitempty"`
	SuppressError         bool      `protobuf:"varint,3,opt,name=suppress_error,json=suppressError,proto3" json:"suppress_error,omitempty"`
	RedirectOutputToError bool      `protobuf:"varint,4,opt,name=redirect_output_to_error,json=redirectOutputToError,proto3" json:"redirect_output_to_error,omitempty"`
	RedirectErrorToOutput bool      `protobuf:"varint,5,opt,name=redirect_error_to_output,json=redirectErrorToOutput,proto3" json:"redirect_error_to_output,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}  `json:"-"`
	XXX_unrecognized      []byte    `json:"-"`
	XXX_sizecache         int32     `json:"-"`
}

func (m *OutputOptions) Reset()         { *m = OutputOptions{} }
func (m *OutputOptions) String() string { return proto.CompactTextString(m) }
func (*OutputOptions) ProtoMessage()    {}
func (*OutputOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{1}
}
func (m *OutputOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutputOptions.Unmarshal(m, b)
}
func (m *OutputOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutputOptions.Marshal(b, m, deterministic)
}
func (m *OutputOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputOptions.Merge(m, src)
}
func (m *OutputOptions) XXX_Size() int {
	return xxx_messageInfo_OutputOptions.Size(m)
}
func (m *OutputOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputOptions.DiscardUnknown(m)
}

var xxx_messageInfo_OutputOptions proto.InternalMessageInfo

func (m *OutputOptions) GetLoggers() []*Logger {
	if m != nil {
		return m.Loggers
	}
	return nil
}

func (m *OutputOptions) GetSuppressOutput() bool {
	if m != nil {
		return m.SuppressOutput
	}
	return false
}

func (m *OutputOptions) GetSuppressError() bool {
	if m != nil {
		return m.SuppressError
	}
	return false
}

func (m *OutputOptions) GetRedirectOutputToError() bool {
	if m != nil {
		return m.RedirectOutputToError
	}
	return false
}

func (m *OutputOptions) GetRedirectErrorToOutput() bool {
	if m != nil {
		return m.RedirectErrorToOutput
	}
	return false
}

type CreateOptions struct {
	Args                 []string          `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	WorkingDirectory     string            `protobuf:"bytes,2,opt,name=working_directory,json=workingDirectory,proto3" json:"working_directory,omitempty"`
	Environment          map[string]string `protobuf:"bytes,3,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OverrideEnviron      bool              `protobuf:"varint,4,opt,name=override_environ,json=overrideEnviron,proto3" json:"override_environ,omitempty"`
	TimeoutSeconds       int64             `protobuf:"varint,5,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	Tags                 []string          `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	OnSuccess            []*CreateOptions  `protobuf:"bytes,7,rep,name=on_success,json=onSuccess,proto3" json:"on_success,omitempty"`
	OnFailure            []*CreateOptions  `protobuf:"bytes,8,rep,name=on_failure,json=onFailure,proto3" json:"on_failure,omitempty"`
	OnTimeout            []*CreateOptions  `protobuf:"bytes,9,rep,name=on_timeout,json=onTimeout,proto3" json:"on_timeout,omitempty"`
	Output               *OutputOptions    `protobuf:"bytes,10,opt,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateOptions) Reset()         { *m = CreateOptions{} }
func (m *CreateOptions) String() string { return proto.CompactTextString(m) }
func (*CreateOptions) ProtoMessage()    {}
func (*CreateOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{2}
}
func (m *CreateOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateOptions.Unmarshal(m, b)
}
func (m *CreateOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateOptions.Marshal(b, m, deterministic)
}
func (m *CreateOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOptions.Merge(m, src)
}
func (m *CreateOptions) XXX_Size() int {
	return xxx_messageInfo_CreateOptions.Size(m)
}
func (m *CreateOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOptions proto.InternalMessageInfo

func (m *CreateOptions) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *CreateOptions) GetWorkingDirectory() string {
	if m != nil {
		return m.WorkingDirectory
	}
	return ""
}

func (m *CreateOptions) GetEnvironment() map[string]string {
	if m != nil {
		return m.Environment
	}
	return nil
}

func (m *CreateOptions) GetOverrideEnviron() bool {
	if m != nil {
		return m.OverrideEnviron
	}
	return false
}

func (m *CreateOptions) GetTimeoutSeconds() int64 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

func (m *CreateOptions) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *CreateOptions) GetOnSuccess() []*CreateOptions {
	if m != nil {
		return m.OnSuccess
	}
	return nil
}

func (m *CreateOptions) GetOnFailure() []*CreateOptions {
	if m != nil {
		return m.OnFailure
	}
	return nil
}

func (m *CreateOptions) GetOnTimeout() []*CreateOptions {
	if m != nil {
		return m.OnTimeout
	}
	return nil
}

func (m *CreateOptions) GetOutput() *OutputOptions {
	if m != nil {
		return m.Output
	}
	return nil
}

type ProcessInfo struct {
	Id                   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Pid                  int64          `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	HostId               string         `protobuf:"bytes,3,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Running              bool           `protobuf:"varint,4,opt,name=running,proto3" json:"running,omitempty"`
	Successful           bool           `protobuf:"varint,5,opt,name=successful,proto3" json:"successful,omitempty"`
	Complete             bool           `protobuf:"varint,6,opt,name=complete,proto3" json:"complete,omitempty"`
	Timedout             bool           `protobuf:"varint,7,opt,name=timedout,proto3" json:"timedout,omitempty"`
	Options              *CreateOptions `protobuf:"bytes,8,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ProcessInfo) Reset()         { *m = ProcessInfo{} }
func (m *ProcessInfo) String() string { return proto.CompactTextString(m) }
func (*ProcessInfo) ProtoMessage()    {}
func (*ProcessInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{3}
}
func (m *ProcessInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessInfo.Unmarshal(m, b)
}
func (m *ProcessInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessInfo.Marshal(b, m, deterministic)
}
func (m *ProcessInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessInfo.Merge(m, src)
}
func (m *ProcessInfo) XXX_Size() int {
	return xxx_messageInfo_ProcessInfo.Size(m)
}
func (m *ProcessInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessInfo proto.InternalMessageInfo

func (m *ProcessInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProcessInfo) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ProcessInfo) GetHostId() string {
	if m != nil {
		return m.HostId
	}
	return ""
}

func (m *ProcessInfo) GetRunning() bool {
	if m != nil {
		return m.Running
	}
	return false
}

func (m *ProcessInfo) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func (m *ProcessInfo) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

func (m *ProcessInfo) GetTimedout() bool {
	if m != nil {
		return m.Timedout
	}
	return false
}

func (m *ProcessInfo) GetOptions() *CreateOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type StatusResponse struct {
	HostId               string   `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Active               bool     `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{4}
}
func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusResponse.Unmarshal(m, b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return xxx_messageInfo_StatusResponse.Size(m)
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetHostId() string {
	if m != nil {
		return m.HostId
	}
	return ""
}

func (m *StatusResponse) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type Filter struct {
	Name                 FilterSpecifications `protobuf:"varint,1,opt,name=name,proto3,enum=jasper.FilterSpecifications" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Filter) Reset()         { *m = Filter{} }
func (m *Filter) String() string { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()    {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{5}
}
func (m *Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Filter.Unmarshal(m, b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
}
func (m *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(m, src)
}
func (m *Filter) XXX_Size() int {
	return xxx_messageInfo_Filter.Size(m)
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func (m *Filter) GetName() FilterSpecifications {
	if m != nil {
		return m.Name
	}
	return FilterSpecifications_ALL
}

type SignalProcess struct {
	ProcessID            *JasperProcessID `protobuf:"bytes,1,opt,name=ProcessID,proto3" json:"ProcessID,omitempty"`
	Signal               Signals          `protobuf:"varint,2,opt,name=signal,proto3,enum=jasper.Signals" json:"signal,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SignalProcess) Reset()         { *m = SignalProcess{} }
func (m *SignalProcess) String() string { return proto.CompactTextString(m) }
func (*SignalProcess) ProtoMessage()    {}
func (*SignalProcess) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{6}
}
func (m *SignalProcess) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignalProcess.Unmarshal(m, b)
}
func (m *SignalProcess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignalProcess.Marshal(b, m, deterministic)
}
func (m *SignalProcess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalProcess.Merge(m, src)
}
func (m *SignalProcess) XXX_Size() int {
	return xxx_messageInfo_SignalProcess.Size(m)
}
func (m *SignalProcess) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalProcess.DiscardUnknown(m)
}

var xxx_messageInfo_SignalProcess proto.InternalMessageInfo

func (m *SignalProcess) GetProcessID() *JasperProcessID {
	if m != nil {
		return m.ProcessID
	}
	return nil
}

func (m *SignalProcess) GetSignal() Signals {
	if m != nil {
		return m.Signal
	}
	return Signals_UNKNOWN
}

type TagName struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagName) Reset()         { *m = TagName{} }
func (m *TagName) String() string { return proto.CompactTextString(m) }
func (*TagName) ProtoMessage()    {}
func (*TagName) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{7}
}
func (m *TagName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TagName.Unmarshal(m, b)
}
func (m *TagName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TagName.Marshal(b, m, deterministic)
}
func (m *TagName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagName.Merge(m, src)
}
func (m *TagName) XXX_Size() int {
	return xxx_messageInfo_TagName.Size(m)
}
func (m *TagName) XXX_DiscardUnknown() {
	xxx_messageInfo_TagName.DiscardUnknown(m)
}

var xxx_messageInfo_TagName proto.InternalMessageInfo

func (m *TagName) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ProcessTags struct {
	ProcessID            string   `protobuf:"bytes,1,opt,name=processID,proto3" json:"processID,omitempty"`
	Tags                 []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessTags) Reset()         { *m = ProcessTags{} }
func (m *ProcessTags) String() string { return proto.CompactTextString(m) }
func (*ProcessTags) ProtoMessage()    {}
func (*ProcessTags) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{8}
}
func (m *ProcessTags) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessTags.Unmarshal(m, b)
}
func (m *ProcessTags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessTags.Marshal(b, m, deterministic)
}
func (m *ProcessTags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessTags.Merge(m, src)
}
func (m *ProcessTags) XXX_Size() int {
	return xxx_messageInfo_ProcessTags.Size(m)
}
func (m *ProcessTags) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessTags.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessTags proto.InternalMessageInfo

func (m *ProcessTags) GetProcessID() string {
	if m != nil {
		return m.ProcessID
	}
	return ""
}

func (m *ProcessTags) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type JasperProcessID struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JasperProcessID) Reset()         { *m = JasperProcessID{} }
func (m *JasperProcessID) String() string { return proto.CompactTextString(m) }
func (*JasperProcessID) ProtoMessage()    {}
func (*JasperProcessID) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{9}
}
func (m *JasperProcessID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JasperProcessID.Unmarshal(m, b)
}
func (m *JasperProcessID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JasperProcessID.Marshal(b, m, deterministic)
}
func (m *JasperProcessID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JasperProcessID.Merge(m, src)
}
func (m *JasperProcessID) XXX_Size() int {
	return xxx_messageInfo_JasperProcessID.Size(m)
}
func (m *JasperProcessID) XXX_DiscardUnknown() {
	xxx_messageInfo_JasperProcessID.DiscardUnknown(m)
}

var xxx_messageInfo_JasperProcessID proto.InternalMessageInfo

func (m *JasperProcessID) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type OperationOutcome struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OperationOutcome) Reset()         { *m = OperationOutcome{} }
func (m *OperationOutcome) String() string { return proto.CompactTextString(m) }
func (*OperationOutcome) ProtoMessage()    {}
func (*OperationOutcome) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{10}
}
func (m *OperationOutcome) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OperationOutcome.Unmarshal(m, b)
}
func (m *OperationOutcome) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OperationOutcome.Marshal(b, m, deterministic)
}
func (m *OperationOutcome) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationOutcome.Merge(m, src)
}
func (m *OperationOutcome) XXX_Size() int {
	return xxx_messageInfo_OperationOutcome.Size(m)
}
func (m *OperationOutcome) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationOutcome.DiscardUnknown(m)
}

var xxx_messageInfo_OperationOutcome proto.InternalMessageInfo

func (m *OperationOutcome) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *OperationOutcome) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type BuildOptions struct {
	Target               string   `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Arch                 string   `protobuf:"bytes,2,opt,name=arch,proto3" json:"arch,omitempty"`
	Edition              string   `protobuf:"bytes,3,opt,name=edition,proto3" json:"edition,omitempty"`
	Debug                bool     `protobuf:"varint,4,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildOptions) Reset()         { *m = BuildOptions{} }
func (m *BuildOptions) String() string { return proto.CompactTextString(m) }
func (*BuildOptions) ProtoMessage()    {}
func (*BuildOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{11}
}
func (m *BuildOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildOptions.Unmarshal(m, b)
}
func (m *BuildOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildOptions.Marshal(b, m, deterministic)
}
func (m *BuildOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildOptions.Merge(m, src)
}
func (m *BuildOptions) XXX_Size() int {
	return xxx_messageInfo_BuildOptions.Size(m)
}
func (m *BuildOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BuildOptions proto.InternalMessageInfo

func (m *BuildOptions) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *BuildOptions) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *BuildOptions) GetEdition() string {
	if m != nil {
		return m.Edition
	}
	return ""
}

func (m *BuildOptions) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

type MongoDBDownloadOptions struct {
	BuildOptions         *BuildOptions `protobuf:"bytes,1,opt,name=build_options,json=buildOptions,proto3" json:"build_options,omitempty"`
	Path                 string        `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Releases             []string      `protobuf:"bytes,3,rep,name=releases,proto3" json:"releases,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MongoDBDownloadOptions) Reset()         { *m = MongoDBDownloadOptions{} }
func (m *MongoDBDownloadOptions) String() string { return proto.CompactTextString(m) }
func (*MongoDBDownloadOptions) ProtoMessage()    {}
func (*MongoDBDownloadOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{12}
}
func (m *MongoDBDownloadOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MongoDBDownloadOptions.Unmarshal(m, b)
}
func (m *MongoDBDownloadOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MongoDBDownloadOptions.Marshal(b, m, deterministic)
}
func (m *MongoDBDownloadOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MongoDBDownloadOptions.Merge(m, src)
}
func (m *MongoDBDownloadOptions) XXX_Size() int {
	return xxx_messageInfo_MongoDBDownloadOptions.Size(m)
}
func (m *MongoDBDownloadOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_MongoDBDownloadOptions.DiscardUnknown(m)
}

var xxx_messageInfo_MongoDBDownloadOptions proto.InternalMessageInfo

func (m *MongoDBDownloadOptions) GetBuildOptions() *BuildOptions {
	if m != nil {
		return m.BuildOptions
	}
	return nil
}

func (m *MongoDBDownloadOptions) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *MongoDBDownloadOptions) GetReleases() []string {
	if m != nil {
		return m.Releases
	}
	return nil
}

type CacheOptions struct {
	Disabled             bool     `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	PruneDelay           int64    `protobuf:"varint,2,opt,name=prune_delay,json=pruneDelay,proto3" json:"prune_delay,omitempty"`
	MaxSize              int64    `protobuf:"varint,3,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CacheOptions) Reset()         { *m = CacheOptions{} }
func (m *CacheOptions) String() string { return proto.CompactTextString(m) }
func (*CacheOptions) ProtoMessage()    {}
func (*CacheOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{13}
}
func (m *CacheOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CacheOptions.Unmarshal(m, b)
}
func (m *CacheOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CacheOptions.Marshal(b, m, deterministic)
}
func (m *CacheOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheOptions.Merge(m, src)
}
func (m *CacheOptions) XXX_Size() int {
	return xxx_messageInfo_CacheOptions.Size(m)
}
func (m *CacheOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CacheOptions proto.InternalMessageInfo

func (m *CacheOptions) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *CacheOptions) GetPruneDelay() int64 {
	if m != nil {
		return m.PruneDelay
	}
	return 0
}

func (m *CacheOptions) GetMaxSize() int64 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

type ArchiveOptions struct {
	ShouldExtract        bool          `protobuf:"varint,1,opt,name=should_extract,json=shouldExtract,proto3" json:"should_extract,omitempty"`
	Format               ArchiveFormat `protobuf:"varint,2,opt,name=format,proto3,enum=jasper.ArchiveFormat" json:"format,omitempty"`
	TargetPath           string        `protobuf:"bytes,3,opt,name=target_path,json=targetPath,proto3" json:"target_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ArchiveOptions) Reset()         { *m = ArchiveOptions{} }
func (m *ArchiveOptions) String() string { return proto.CompactTextString(m) }
func (*ArchiveOptions) ProtoMessage()    {}
func (*ArchiveOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{14}
}
func (m *ArchiveOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArchiveOptions.Unmarshal(m, b)
}
func (m *ArchiveOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArchiveOptions.Marshal(b, m, deterministic)
}
func (m *ArchiveOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveOptions.Merge(m, src)
}
func (m *ArchiveOptions) XXX_Size() int {
	return xxx_messageInfo_ArchiveOptions.Size(m)
}
func (m *ArchiveOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveOptions proto.InternalMessageInfo

func (m *ArchiveOptions) GetShouldExtract() bool {
	if m != nil {
		return m.ShouldExtract
	}
	return false
}

func (m *ArchiveOptions) GetFormat() ArchiveFormat {
	if m != nil {
		return m.Format
	}
	return ArchiveFormat_ARCHIVEUNKNOWN
}

func (m *ArchiveOptions) GetTargetPath() string {
	if m != nil {
		return m.TargetPath
	}
	return ""
}

type DownloadInfo struct {
	Url                  string          `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Path                 string          `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	ArchiveOpts          *ArchiveOptions `protobuf:"bytes,3,opt,name=archive_opts,json=archiveOpts,proto3" json:"archive_opts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DownloadInfo) Reset()         { *m = DownloadInfo{} }
func (m *DownloadInfo) String() string { return proto.CompactTextString(m) }
func (*DownloadInfo) ProtoMessage()    {}
func (*DownloadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{15}
}
func (m *DownloadInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownloadInfo.Unmarshal(m, b)
}
func (m *DownloadInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownloadInfo.Marshal(b, m, deterministic)
}
func (m *DownloadInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadInfo.Merge(m, src)
}
func (m *DownloadInfo) XXX_Size() int {
	return xxx_messageInfo_DownloadInfo.Size(m)
}
func (m *DownloadInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadInfo proto.InternalMessageInfo

func (m *DownloadInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *DownloadInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *DownloadInfo) GetArchiveOpts() *ArchiveOptions {
	if m != nil {
		return m.ArchiveOpts
	}
	return nil
}

func init() {
	proto.RegisterType((*Logger)(nil), "jasper.Logger")
	proto.RegisterType((*OutputOptions)(nil), "jasper.OutputOptions")
	proto.RegisterType((*CreateOptions)(nil), "jasper.CreateOptions")
	proto.RegisterMapType((map[string]string)(nil), "jasper.CreateOptions.EnvironmentEntry")
	proto.RegisterType((*ProcessInfo)(nil), "jasper.ProcessInfo")
	proto.RegisterType((*StatusResponse)(nil), "jasper.StatusResponse")
	proto.RegisterType((*Filter)(nil), "jasper.Filter")
	proto.RegisterType((*SignalProcess)(nil), "jasper.SignalProcess")
	proto.RegisterType((*TagName)(nil), "jasper.TagName")
	proto.RegisterType((*ProcessTags)(nil), "jasper.ProcessTags")
	proto.RegisterType((*JasperProcessID)(nil), "jasper.JasperProcessID")
	proto.RegisterType((*OperationOutcome)(nil), "jasper.OperationOutcome")
	proto.RegisterType((*BuildOptions)(nil), "jasper.BuildOptions")
	proto.RegisterType((*MongoDBDownloadOptions)(nil), "jasper.MongoDBDownloadOptions")
	proto.RegisterType((*CacheOptions)(nil), "jasper.CacheOptions")
	proto.RegisterType((*ArchiveOptions)(nil), "jasper.ArchiveOptions")
	proto.RegisterType((*DownloadInfo)(nil), "jasper.DownloadInfo")
	proto.RegisterEnum("jasper.LogType", LogType_name, LogType_value)
	proto.RegisterEnum("jasper.FilterSpecifications", FilterSpecifications_name, FilterSpecifications_value)
	proto.RegisterEnum("jasper.Signals", Signals_name, Signals_value)
	proto.RegisterEnum("jasper.ArchiveFormat", ArchiveFormat_name, ArchiveFormat_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JasperProcessManagerClient is the client API for JasperProcessManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JasperProcessManagerClient interface {
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	Create(ctx context.Context, in *CreateOptions, opts ...grpc.CallOption) (*ProcessInfo, error)
	List(ctx context.Context, in *Filter, opts ...grpc.CallOption) (JasperProcessManager_ListClient, error)
	Group(ctx context.Context, in *TagName, opts ...grpc.CallOption) (JasperProcessManager_GroupClient, error)
	Get(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*ProcessInfo, error)
	Wait(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*OperationOutcome, error)
	Signal(ctx context.Context, in *SignalProcess, opts ...grpc.CallOption) (*OperationOutcome, error)
	Close(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OperationOutcome, error)
	TagProcess(ctx context.Context, in *ProcessTags, opts ...grpc.CallOption) (*OperationOutcome, error)
	ResetTags(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*OperationOutcome, error)
	GetTags(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*ProcessTags, error)
	DownloadFile(ctx context.Context, in *DownloadInfo, opts ...grpc.CallOption) (*OperationOutcome, error)
	DownloadFileAsync(ctx context.Context, in *DownloadInfo, opts ...grpc.CallOption) (*OperationOutcome, error)
	DownloadMongoDB(ctx context.Context, in *MongoDBDownloadOptions, opts ...grpc.CallOption) (*OperationOutcome, error)
	ConfigureCache(ctx context.Context, in *CacheOptions, opts ...grpc.CallOption) (*OperationOutcome, error)
}

type jasperProcessManagerClient struct {
	cc *grpc.ClientConn
}

func NewJasperProcessManagerClient(cc *grpc.ClientConn) JasperProcessManagerClient {
	return &jasperProcessManagerClient{cc}
}

func (c *jasperProcessManagerClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Create(ctx context.Context, in *CreateOptions, opts ...grpc.CallOption) (*ProcessInfo, error) {
	out := new(ProcessInfo)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) List(ctx context.Context, in *Filter, opts ...grpc.CallOption) (JasperProcessManager_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JasperProcessManager_serviceDesc.Streams[0], "/jasper.JasperProcessManager/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &jasperProcessManagerListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JasperProcessManager_ListClient interface {
	Recv() (*ProcessInfo, error)
	grpc.ClientStream
}

type jasperProcessManagerListClient struct {
	grpc.ClientStream
}

func (x *jasperProcessManagerListClient) Recv() (*ProcessInfo, error) {
	m := new(ProcessInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jasperProcessManagerClient) Group(ctx context.Context, in *TagName, opts ...grpc.CallOption) (JasperProcessManager_GroupClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JasperProcessManager_serviceDesc.Streams[1], "/jasper.JasperProcessManager/Group", opts...)
	if err != nil {
		return nil, err
	}
	x := &jasperProcessManagerGroupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JasperProcessManager_GroupClient interface {
	Recv() (*ProcessInfo, error)
	grpc.ClientStream
}

type jasperProcessManagerGroupClient struct {
	grpc.ClientStream
}

func (x *jasperProcessManagerGroupClient) Recv() (*ProcessInfo, error) {
	m := new(ProcessInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jasperProcessManagerClient) Get(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*ProcessInfo, error) {
	out := new(ProcessInfo)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Wait(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Wait", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Signal(ctx context.Context, in *SignalProcess, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Signal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Close(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) TagProcess(ctx context.Context, in *ProcessTags, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/TagProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ResetTags(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ResetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) GetTags(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*ProcessTags, error) {
	out := new(ProcessTags)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/GetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) DownloadFile(ctx context.Context, in *DownloadInfo, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/DownloadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) DownloadFileAsync(ctx context.Context, in *DownloadInfo, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/DownloadFileAsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) DownloadMongoDB(ctx context.Context, in *MongoDBDownloadOptions, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/DownloadMongoDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ConfigureCache(ctx context.Context, in *CacheOptions, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ConfigureCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JasperProcessManagerServer is the server API for JasperProcessManager service.
type JasperProcessManagerServer interface {
	Status(context.Context, *empty.Empty) (*StatusResponse, error)
	Create(context.Context, *CreateOptions) (*ProcessInfo, error)
	List(*Filter, JasperProcessManager_ListServer) error
	Group(*TagName, JasperProcessManager_GroupServer) error
	Get(context.Context, *JasperProcessID) (*ProcessInfo, error)
	Wait(context.Context, *JasperProcessID) (*OperationOutcome, error)
	Signal(context.Context, *SignalProcess) (*OperationOutcome, error)
	Close(context.Context, *empty.Empty) (*OperationOutcome, error)
	TagProcess(context.Context, *ProcessTags) (*OperationOutcome, error)
	ResetTags(context.Context, *JasperProcessID) (*OperationOutcome, error)
	GetTags(context.Context, *JasperProcessID) (*ProcessTags, error)
	DownloadFile(context.Context, *DownloadInfo) (*OperationOutcome, error)
	DownloadFileAsync(context.Context, *DownloadInfo) (*OperationOutcome, error)
	DownloadMongoDB(context.Context, *MongoDBDownloadOptions) (*OperationOutcome, error)
	ConfigureCache(context.Context, *CacheOptions) (*OperationOutcome, error)
}

func RegisterJasperProcessManagerServer(s *grpc.Server, srv JasperProcessManagerServer) {
	s.RegisterService(&_JasperProcessManager_serviceDesc, srv)
}

func _JasperProcessManager_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Create(ctx, req.(*CreateOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JasperProcessManagerServer).List(m, &jasperProcessManagerListServer{stream})
}

type JasperProcessManager_ListServer interface {
	Send(*ProcessInfo) error
	grpc.ServerStream
}

type jasperProcessManagerListServer struct {
	grpc.ServerStream
}

func (x *jasperProcessManagerListServer) Send(m *ProcessInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _JasperProcessManager_Group_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagName)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JasperProcessManagerServer).Group(m, &jasperProcessManagerGroupServer{stream})
}

type JasperProcessManager_GroupServer interface {
	Send(*ProcessInfo) error
	grpc.ServerStream
}

type jasperProcessManagerGroupServer struct {
	grpc.ServerStream
}

func (x *jasperProcessManagerGroupServer) Send(m *ProcessInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _JasperProcessManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JasperProcessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Get(ctx, req.(*JasperProcessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Wait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JasperProcessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Wait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Wait",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Wait(ctx, req.(*JasperProcessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Signal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalProcess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Signal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Signal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Signal(ctx, req.(*SignalProcess))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Close(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_TagProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).TagProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/TagProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).TagProcess(ctx, req.(*ProcessTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ResetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JasperProcessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ResetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ResetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ResetTags(ctx, req.(*JasperProcessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JasperProcessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/GetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).GetTags(ctx, req.(*JasperProcessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/DownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).DownloadFile(ctx, req.(*DownloadInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_DownloadFileAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).DownloadFileAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/DownloadFileAsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).DownloadFileAsync(ctx, req.(*DownloadInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_DownloadMongoDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MongoDBDownloadOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).DownloadMongoDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/DownloadMongoDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).DownloadMongoDB(ctx, req.(*MongoDBDownloadOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ConfigureCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ConfigureCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ConfigureCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ConfigureCache(ctx, req.(*CacheOptions))
	}
	return interceptor(ctx, in, info, handler)
}

var _JasperProcessManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jasper.JasperProcessManager",
	HandlerType: (*JasperProcessManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _JasperProcessManager_Status_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _JasperProcessManager_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _JasperProcessManager_Get_Handler,
		},
		{
			MethodName: "Wait",
			Handler:    _JasperProcessManager_Wait_Handler,
		},
		{
			MethodName: "Signal",
			Handler:    _JasperProcessManager_Signal_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _JasperProcessManager_Close_Handler,
		},
		{
			MethodName: "TagProcess",
			Handler:    _JasperProcessManager_TagProcess_Handler,
		},
		{
			MethodName: "ResetTags",
			Handler:    _JasperProcessManager_ResetTags_Handler,
		},
		{
			MethodName: "GetTags",
			Handler:    _JasperProcessManager_GetTags_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _JasperProcessManager_DownloadFile_Handler,
		},
		{
			MethodName: "DownloadFileAsync",
			Handler:    _JasperProcessManager_DownloadFileAsync_Handler,
		},
		{
			MethodName: "DownloadMongoDB",
			Handler:    _JasperProcessManager_DownloadMongoDB_Handler,
		},
		{
			MethodName: "ConfigureCache",
			Handler:    _JasperProcessManager_ConfigureCache_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _JasperProcessManager_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Group",
			Handler:       _JasperProcessManager_Group_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "jasper.proto",
}

func init() { proto.RegisterFile("jasper.proto", fileDescriptor_d30110796082ce8e) }

var fileDescriptor_d30110796082ce8e = []byte{
	// 1531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x5f, 0x6f, 0xe3, 0xc6,
	0x11, 0x0f, 0x2d, 0x99, 0x94, 0x46, 0x96, 0xcc, 0x6c, 0x1d, 0x47, 0x75, 0x83, 0xe4, 0x20, 0xa0,
	0xbd, 0xab, 0x8b, 0xd8, 0xa9, 0xef, 0x8a, 0xc4, 0x29, 0x70, 0x8d, 0xac, 0x7f, 0x56, 0x4d, 0x4b,
	0x06, 0x25, 0x25, 0x69, 0x5e, 0x84, 0xb5, 0xb8, 0xa2, 0x99, 0x50, 0x5c, 0x62, 0xb9, 0x74, 0xac,
	0x7b, 0xed, 0x43, 0x3f, 0x40, 0x81, 0x7e, 0x82, 0x7e, 0xbb, 0x7e, 0x84, 0xbe, 0x14, 0xfb, 0x87,
	0x94, 0xe4, 0xca, 0x3e, 0xb4, 0x4f, 0xdc, 0xf9, 0xf3, 0x9b, 0x99, 0x9d, 0x99, 0x9d, 0x21, 0xec,
	0xfd, 0x88, 0x93, 0x98, 0xb0, 0x93, 0x98, 0x51, 0x4e, 0x91, 0xa9, 0xa8, 0xa3, 0x5f, 0xf9, 0x94,
	0xfa, 0x21, 0x39, 0x95, 0xdc, 0xdb, 0x74, 0x7e, 0x4a, 0x16, 0x31, 0x5f, 0x2a, 0xa5, 0xc6, 0x1b,
	0x30, 0x1d, 0xea, 0xfb, 0x84, 0xa1, 0x63, 0x28, 0x85, 0xd4, 0x9f, 0xf2, 0x65, 0x4c, 0xea, 0xc6,
	0x0b, 0xe3, 0x55, 0xed, 0x6c, 0xff, 0x44, 0xdb, 0x73, 0xa8, 0x3f, 0x5e, 0xc6, 0xc4, 0xb5, 0x42,
	0x75, 0x68, 0xfc, 0xdb, 0x80, 0xea, 0x30, 0xe5, 0x71, 0xca, 0x87, 0x31, 0x0f, 0x68, 0x94, 0xa0,
	0x57, 0x20, 0x84, 0x3e, 0x61, 0x49, 0xdd, 0x78, 0x51, 0x78, 0x55, 0x39, 0xab, 0xad, 0x81, 0x7d,
	0xc2, 0xdc, 0x4c, 0x8c, 0x5e, 0xc2, 0x7e, 0x92, 0xc6, 0x31, 0x23, 0x49, 0x32, 0xa5, 0xd2, 0x46,
	0x7d, 0xe7, 0x85, 0xf1, 0xaa, 0xe4, 0xd6, 0x32, 0xb6, 0xb2, 0x8c, 0x7e, 0x0d, 0x39, 0x67, 0x4a,
	0x18, 0xa3, 0xac, 0x5e, 0x90, 0x7a, 0xd5, 0x8c, 0xdb, 0x11, 0x4c, 0xf4, 0x25, 0xd4, 0x19, 0xf1,
	0x02, 0x46, 0x66, 0x5c, 0xdb, 0x9b, 0x72, 0xaa, 0x01, 0x45, 0x09, 0xf8, 0x28, 0x93, 0x2b, 0xc3,
	0x63, 0xfa, 0xdf, 0x40, 0xa9, 0x2e, 0x70, 0x3a, 0xa2, 0xdd, 0x4d, 0xa0, 0x04, 0x8c, 0xa9, 0xc2,
	0x37, 0xfe, 0x5e, 0x84, 0x6a, 0x8b, 0x11, 0xcc, 0x49, 0x76, 0x7b, 0x04, 0x45, 0xcc, 0x7c, 0x75,
	0xf5, 0xb2, 0x2b, 0xcf, 0xe8, 0x77, 0xf0, 0xe1, 0xcf, 0x94, 0xfd, 0x14, 0x44, 0xfe, 0x54, 0x19,
	0xa1, 0x6c, 0x29, 0x6f, 0x5a, 0x76, 0x6d, 0x2d, 0x68, 0x67, 0x7c, 0x74, 0x09, 0x15, 0x12, 0xdd,
	0x07, 0x8c, 0x46, 0x0b, 0x12, 0xf1, 0x7a, 0x41, 0xa6, 0xf0, 0x37, 0x59, 0x0a, 0x37, 0x9c, 0x9d,
	0x74, 0x56, 0x8a, 0x9d, 0x88, 0xb3, 0xa5, 0xbb, 0x0e, 0x45, 0xbf, 0x05, 0x9b, 0xde, 0x13, 0xc6,
	0x02, 0x8f, 0x4c, 0x35, 0x5f, 0xa7, 0x61, 0x3f, 0xe3, 0x6b, 0x03, 0xa2, 0x12, 0x3c, 0x58, 0x10,
	0x9a, 0xf2, 0x69, 0x42, 0x66, 0x34, 0xf2, 0x12, 0x79, 0xef, 0x82, 0x5b, 0xd3, 0xec, 0x91, 0xe2,
	0x8a, 0xeb, 0x71, 0xec, 0x27, 0x75, 0x53, 0x5d, 0x4f, 0x9c, 0xd1, 0x1b, 0x00, 0x1a, 0x4d, 0x93,
	0x74, 0x36, 0x23, 0x49, 0x52, 0xb7, 0x64, 0xc0, 0x1f, 0x6d, 0x0d, 0xd8, 0x2d, 0xd3, 0x68, 0xa4,
	0xf4, 0x34, 0x6a, 0x8e, 0x83, 0x30, 0x65, 0xa4, 0x5e, 0x7a, 0x0f, 0xaa, 0xab, 0xf4, 0x34, 0x4a,
	0x07, 0x55, 0x2f, 0xbf, 0x07, 0x35, 0x56, 0x7a, 0xe8, 0x73, 0x30, 0x75, 0x35, 0xe1, 0x85, 0xb1,
	0x8e, 0xd8, 0xe8, 0x5c, 0x57, 0x2b, 0x1d, 0xbd, 0x05, 0xfb, 0x71, 0x66, 0x91, 0x0d, 0x85, 0x9f,
	0xc8, 0x52, 0x3e, 0x87, 0xb2, 0x2b, 0x8e, 0xe8, 0x00, 0x76, 0xef, 0x71, 0x98, 0x12, 0x5d, 0x49,
	0x45, 0x7c, 0xbd, 0xf3, 0x95, 0xd1, 0xf8, 0x97, 0x01, 0x95, 0x1b, 0x46, 0xc5, 0x35, 0xfb, 0xd1,
	0x9c, 0xa2, 0x1a, 0xec, 0x04, 0x9e, 0x86, 0xee, 0x04, 0x9e, 0xb0, 0x15, 0x07, 0x9e, 0xc4, 0x15,
	0x5c, 0x71, 0x44, 0x1f, 0x83, 0x75, 0x47, 0x13, 0x3e, 0x0d, 0x3c, 0xd9, 0xd9, 0x65, 0xd7, 0x14,
	0x64, 0xdf, 0x43, 0x75, 0xb0, 0x58, 0x1a, 0x45, 0x41, 0xe4, 0xeb, 0xd2, 0x65, 0x24, 0xfa, 0x14,
	0x40, 0xa7, 0x7c, 0x9e, 0x86, 0xba, 0x4b, 0xd7, 0x38, 0xe8, 0x08, 0x4a, 0x33, 0xba, 0x88, 0x43,
	0xc2, 0x49, 0xdd, 0x94, 0xd2, 0x9c, 0x16, 0x32, 0x91, 0x42, 0x4f, 0xe4, 0xd0, 0x52, 0xb2, 0x8c,
	0x46, 0xa7, 0x60, 0x51, 0x95, 0x8f, 0x7a, 0x69, 0x33, 0x59, 0x9b, 0xe9, 0xcd, 0xb4, 0x1a, 0x4d,
	0xa8, 0x8d, 0x38, 0xe6, 0x69, 0xe2, 0x92, 0x24, 0xa6, 0x51, 0x42, 0xd6, 0x6f, 0x63, 0x6c, 0xdc,
	0xe6, 0x10, 0x4c, 0x3c, 0xe3, 0xc1, 0x3d, 0xd1, 0xef, 0x5c, 0x53, 0x8d, 0xaf, 0xc1, 0xec, 0x06,
	0x21, 0x27, 0x0c, 0x7d, 0x01, 0xc5, 0x08, 0x2f, 0xb2, 0xb1, 0xf3, 0x49, 0xe6, 0x5a, 0x49, 0x47,
	0x31, 0x99, 0x05, 0xf3, 0x60, 0x86, 0x55, 0x04, 0x52, 0xb3, 0x41, 0xa1, 0x3a, 0x0a, 0xfc, 0x08,
	0x87, 0x3a, 0xe3, 0xe8, 0x0f, 0x50, 0xce, 0x92, 0xdf, 0x96, 0x76, 0x2a, 0x67, 0x1f, 0x67, 0x76,
	0xfe, 0x2c, 0x3f, 0xb9, 0xd8, 0x5d, 0x69, 0xa2, 0x97, 0x60, 0x26, 0xd2, 0x8e, 0x8c, 0x6d, 0x6d,
	0xe4, 0x29, 0xeb, 0x89, 0xab, 0xc5, 0x8d, 0xcf, 0xc0, 0x1a, 0x63, 0x7f, 0x80, 0x17, 0x64, 0xd5,
	0x02, 0xc6, 0x5a, 0x0b, 0x34, 0xfe, 0x94, 0x57, 0x7f, 0x2c, 0x9e, 0xc7, 0x27, 0x50, 0x8e, 0x37,
	0xe2, 0x29, 0xbb, 0x2b, 0x46, 0xfe, 0xa0, 0x76, 0x56, 0x0f, 0xaa, 0xf1, 0x12, 0xf6, 0x1f, 0x05,
	0xfa, 0x84, 0xa7, 0x6f, 0xc0, 0x1e, 0xc6, 0x84, 0xc9, 0x7c, 0x0c, 0x53, 0x3e, 0xa3, 0x0b, 0x22,
	0x3a, 0x26, 0x7b, 0x8a, 0x86, 0xea, 0x18, 0x4d, 0x4a, 0x57, 0xe4, 0x81, 0xeb, 0x7e, 0x95, 0xe7,
	0xc6, 0x8f, 0xb0, 0x77, 0x91, 0x06, 0xa1, 0x97, 0x8d, 0xaf, 0x43, 0x30, 0x39, 0x66, 0x3e, 0xe1,
	0x59, 0xe5, 0x14, 0xa5, 0xc6, 0xda, 0xec, 0x2e, 0xc3, 0x8a, 0xb3, 0xf0, 0x44, 0xbc, 0x40, 0xe0,
	0x74, 0xd3, 0x66, 0xa4, 0x88, 0xd6, 0x23, 0xb7, 0x69, 0xd6, 0xb3, 0x8a, 0x68, 0xfc, 0xd5, 0x80,
	0xc3, 0x6b, 0x1a, 0xf9, 0xb4, 0x7d, 0xd1, 0xa6, 0x3f, 0x47, 0x21, 0xc5, 0xb9, 0xdb, 0x73, 0xa8,
	0xde, 0x8a, 0x30, 0xa6, 0x59, 0xeb, 0xa9, 0xba, 0x1d, 0x64, 0x35, 0x58, 0x8f, 0xd1, 0xdd, 0xbb,
	0x5d, 0x8f, 0x18, 0x41, 0x31, 0xc6, 0x3c, 0x8f, 0x4c, 0x9c, 0x45, 0x7f, 0x33, 0x12, 0x12, 0x9c,
	0x90, 0x44, 0x0e, 0xd0, 0xb2, 0x9b, 0xd3, 0x8d, 0x39, 0xec, 0xb5, 0xf0, 0xec, 0x2e, 0x1f, 0xd8,
	0x47, 0x50, 0xf2, 0x82, 0x04, 0xdf, 0x86, 0xc4, 0xd3, 0x09, 0xcb, 0x69, 0xf4, 0x19, 0x54, 0x62,
	0x96, 0x46, 0x64, 0xea, 0x91, 0x10, 0x2f, 0xf5, 0x83, 0x05, 0xc9, 0x6a, 0x0b, 0x0e, 0xfa, 0x25,
	0x94, 0x16, 0xf8, 0x61, 0x9a, 0x04, 0xef, 0x88, 0xcc, 0x41, 0xc1, 0xb5, 0x16, 0xf8, 0x61, 0x14,
	0xbc, 0x23, 0x8d, 0xbf, 0x19, 0x50, 0x6b, 0xb2, 0xd9, 0x5d, 0x70, 0x9f, 0xbb, 0x12, 0x6b, 0xec,
	0x8e, 0xa6, 0xa1, 0x37, 0x25, 0x0f, 0x9c, 0xe1, 0x19, 0xd7, 0x0e, 0xab, 0x8a, 0xdb, 0x51, 0x4c,
	0x31, 0xad, 0xe6, 0x94, 0x2d, 0x30, 0xd7, 0x9d, 0x98, 0x3f, 0x40, 0x6d, 0xae, 0x2b, 0x85, 0xae,
	0x56, 0x12, 0x41, 0xaa, 0x22, 0x4d, 0x65, 0x1e, 0x54, 0x29, 0x40, 0xb1, 0x6e, 0x30, 0xbf, 0x6b,
	0x50, 0xd8, 0xcb, 0xf2, 0x2d, 0xc7, 0x91, 0x0d, 0x85, 0x94, 0x85, 0xd9, 0x28, 0x4b, 0x59, 0xb8,
	0x35, 0x87, 0xe7, 0xb0, 0x87, 0x95, 0x3f, 0x51, 0x94, 0x44, 0xda, 0xad, 0x9c, 0x1d, 0x3e, 0x8a,
	0x25, 0xab, 0x49, 0x05, 0xe7, 0x74, 0x72, 0xfc, 0x4f, 0x03, 0x2c, 0xfd, 0xa3, 0x80, 0x6a, 0x00,
	0xce, 0xb0, 0x37, 0x19, 0x5c, 0x0d, 0x86, 0xdf, 0x0d, 0xec, 0x0f, 0xd0, 0x01, 0xd8, 0xce, 0xb0,
	0x77, 0x31, 0xe9, 0x3b, 0x6d, 0x67, 0xd8, 0xeb, 0x75, 0xdc, 0x6f, 0xcf, 0x6c, 0x63, 0x0b, 0xf7,
	0xb5, 0xbd, 0xa3, 0xb1, 0xed, 0x4e, 0xb7, 0x39, 0x71, 0xc6, 0x76, 0x01, 0x55, 0xc0, 0x72, 0x86,
	0xbd, 0x6e, 0xdf, 0xe9, 0xd8, 0x45, 0x2d, 0xec, 0x0f, 0x2e, 0x3b, 0x6e, 0x7f, 0x6c, 0xef, 0xa2,
	0x2a, 0x94, 0x9d, 0x61, 0x6f, 0x74, 0xe3, 0x4c, 0x06, 0x57, 0xb6, 0x89, 0x6c, 0xd8, 0x13, 0xe4,
	0xe4, 0x7a, 0x28, 0xb4, 0x5a, 0xb6, 0x85, 0xf6, 0xa1, 0x22, 0x01, 0xd7, 0x9d, 0xeb, 0xa1, 0xfb,
	0x17, 0xbb, 0x74, 0xfc, 0x3d, 0x1c, 0x6c, 0x9b, 0x2b, 0xc8, 0x82, 0x42, 0xd3, 0x71, 0xec, 0x0f,
	0x84, 0x3f, 0x77, 0x32, 0x18, 0xf4, 0x07, 0x3d, 0xdb, 0x10, 0xfe, 0xc6, 0x1d, 0xf7, 0xba, 0x3f,
	0x68, 0x8e, 0x3b, 0x6d, 0x7b, 0x07, 0x01, 0x98, 0xdd, 0x66, 0xdf, 0xe9, 0xb4, 0xed, 0x82, 0x90,
	0x8d, 0x26, 0xad, 0x56, 0x67, 0x34, 0xea, 0x4e, 0x1c, 0xbb, 0x78, 0x7c, 0x0b, 0x96, 0x9e, 0x1a,
	0xc2, 0xc6, 0xea, 0xf2, 0x15, 0xb0, 0x46, 0xfd, 0x9e, 0x30, 0x63, 0x1b, 0x9a, 0xb8, 0xea, 0x3b,
	0x8e, 0xb2, 0x36, 0xea, 0xf7, 0x2e, 0x27, 0x37, 0x76, 0x41, 0x9f, 0xfb, 0x83, 0xb1, 0x5d, 0xd4,
	0x4a, 0x93, 0x91, 0xfb, 0x7b, 0x7b, 0x77, 0x45, 0x9c, 0xd9, 0xe6, 0xf1, 0xf7, 0x50, 0xdd, 0xe8,
	0x07, 0x84, 0xa0, 0xd6, 0x74, 0x5b, 0x97, 0xfd, 0x6f, 0x3b, 0x2b, 0x87, 0xfb, 0x50, 0xd1, 0xbc,
	0xe6, 0x64, 0x3c, 0xb4, 0x8d, 0x35, 0xa5, 0x71, 0xd3, 0xbd, 0x68, 0x4a, 0xdf, 0x35, 0x00, 0xcd,
	0xfb, 0xa1, 0x7f, 0x63, 0x17, 0xce, 0xfe, 0x61, 0xc1, 0xc1, 0xc6, 0xfc, 0xb9, 0xc6, 0x11, 0x16,
	0xff, 0x85, 0x5f, 0x81, 0xa9, 0x26, 0x3d, 0x3a, 0x3c, 0x51, 0x7f, 0x92, 0x27, 0xd9, 0x9f, 0xe4,
	0x49, 0x47, 0xfc, 0x49, 0x1e, 0xe5, 0xed, 0xf1, 0x68, 0x23, 0xbc, 0x01, 0x53, 0x6d, 0x0f, 0xb4,
	0x7d, 0x9b, 0x1c, 0xfd, 0x22, 0x63, 0xaf, 0xef, 0xcd, 0xcf, 0xa1, 0xe8, 0x04, 0x09, 0x47, 0xb5,
	0xcd, 0x35, 0xb0, 0x55, 0xf9, 0x0b, 0x03, 0x9d, 0xc2, 0x6e, 0x8f, 0xd1, 0x34, 0x46, 0xf9, 0xe8,
	0xd6, 0x73, 0xfa, 0x29, 0xc0, 0x6b, 0x28, 0xf4, 0x08, 0x47, 0x4f, 0x6d, 0x87, 0xed, 0x41, 0x9d,
	0x43, 0xf1, 0x3b, 0x1c, 0x3c, 0x83, 0xaa, 0xe7, 0x3f, 0x17, 0x8f, 0x47, 0xf3, 0x39, 0x98, 0xaa,
	0x2d, 0x56, 0x59, 0xd8, 0x58, 0x5d, 0xcf, 0x42, 0x77, 0x5b, 0x21, 0x4d, 0xc8, 0x93, 0x99, 0x7f,
	0x1a, 0xfa, 0x47, 0x80, 0x31, 0xf6, 0xb3, 0xed, 0xf8, 0xf8, 0x4e, 0x62, 0x45, 0x3d, 0x03, 0x7e,
	0x0b, 0x65, 0x97, 0x24, 0x84, 0xcb, 0x4d, 0xf6, 0x7f, 0x5c, 0xf9, 0x4b, 0xb0, 0x7a, 0xef, 0x43,
	0x6f, 0x0b, 0x09, 0xbd, 0x5d, 0x0d, 0xad, 0x6e, 0x10, 0x12, 0x94, 0xaf, 0x82, 0xf5, 0x51, 0xf6,
	0x8c, 0xe3, 0x16, 0x7c, 0xb8, 0x8e, 0x6f, 0x26, 0xcb, 0x68, 0xf6, 0x3f, 0x1b, 0xb9, 0x82, 0xfd,
	0x4c, 0x53, 0x2f, 0x2e, 0xf4, 0x69, 0xa6, 0xbc, 0x7d, 0x93, 0x3d, 0x63, 0xec, 0x1b, 0xa8, 0xb5,
	0x68, 0x34, 0x0f, 0xfc, 0x94, 0x11, 0xb9, 0x81, 0x56, 0xe1, 0xac, 0x2f, 0xa4, 0xa7, 0x2d, 0x5c,
	0xc0, 0x0f, 0xa5, 0x20, 0xe2, 0x84, 0x45, 0x38, 0xbc, 0x35, 0x65, 0xfd, 0x5f, 0xff, 0x27, 0x00,
	0x00, 0xff, 0xff, 0x12, 0xc3, 0x50, 0xfa, 0xe9, 0x0d, 0x00, 0x00,
}

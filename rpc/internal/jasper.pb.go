// Code generated by protoc-gen-go. DO NOT EDIT.
// source: jasper.proto

package internal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogType int32

const (
	LogType_LOGUNKNOWN       LogType = 0
	LogType_LOGBUILDLOGGERV2 LogType = 1
	LogType_LOGBUILDLOGGERV3 LogType = 2
	LogType_LOGDEFAULT       LogType = 3
	LogType_LOGFILE          LogType = 4
	LogType_LOGINHERIT       LogType = 5
	LogType_LOGSPLUNK        LogType = 6
	LogType_LOGSUMOLOGIC     LogType = 7
	LogType_LOGINMEMORY      LogType = 8
)

var LogType_name = map[int32]string{
	0: "LOGUNKNOWN",
	1: "LOGBUILDLOGGERV2",
	2: "LOGBUILDLOGGERV3",
	3: "LOGDEFAULT",
	4: "LOGFILE",
	5: "LOGINHERIT",
	6: "LOGSPLUNK",
	7: "LOGSUMOLOGIC",
	8: "LOGINMEMORY",
}

var LogType_value = map[string]int32{
	"LOGUNKNOWN":       0,
	"LOGBUILDLOGGERV2": 1,
	"LOGBUILDLOGGERV3": 2,
	"LOGDEFAULT":       3,
	"LOGFILE":          4,
	"LOGINHERIT":       5,
	"LOGSPLUNK":        6,
	"LOGSUMOLOGIC":     7,
	"LOGINMEMORY":      8,
}

func (x LogType) String() string {
	return proto.EnumName(LogType_name, int32(x))
}

func (LogType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{0}
}

type LogFormat int32

const (
	LogFormat_LOGFORMATUNKNOWN LogFormat = 0
	LogFormat_LOGFORMATDEFAULT LogFormat = 1
	LogFormat_LOGFORMATJSON    LogFormat = 2
	LogFormat_LOGFORMATPLAIN   LogFormat = 3
)

var LogFormat_name = map[int32]string{
	0: "LOGFORMATUNKNOWN",
	1: "LOGFORMATDEFAULT",
	2: "LOGFORMATJSON",
	3: "LOGFORMATPLAIN",
}

var LogFormat_value = map[string]int32{
	"LOGFORMATUNKNOWN": 0,
	"LOGFORMATDEFAULT": 1,
	"LOGFORMATJSON":    2,
	"LOGFORMATPLAIN":   3,
}

func (x LogFormat) String() string {
	return proto.EnumName(LogFormat_name, int32(x))
}

func (LogFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{1}
}

type FilterSpecifications int32

const (
	FilterSpecifications_ALL        FilterSpecifications = 0
	FilterSpecifications_RUNNING    FilterSpecifications = 1
	FilterSpecifications_TERMINATED FilterSpecifications = 2
	FilterSpecifications_FAILED     FilterSpecifications = 3
	FilterSpecifications_SUCCESSFUL FilterSpecifications = 4
)

var FilterSpecifications_name = map[int32]string{
	0: "ALL",
	1: "RUNNING",
	2: "TERMINATED",
	3: "FAILED",
	4: "SUCCESSFUL",
}

var FilterSpecifications_value = map[string]int32{
	"ALL":        0,
	"RUNNING":    1,
	"TERMINATED": 2,
	"FAILED":     3,
	"SUCCESSFUL": 4,
}

func (x FilterSpecifications) String() string {
	return proto.EnumName(FilterSpecifications_name, int32(x))
}

func (FilterSpecifications) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{2}
}

type Signals int32

const (
	Signals_UNKNOWN   Signals = 0
	Signals_TERMINATE Signals = 1
	Signals_KILL      Signals = 2
	Signals_HANGUP    Signals = 3
	Signals_INIT      Signals = 4
	Signals_USER1     Signals = 5
	Signals_USER2     Signals = 6
)

var Signals_name = map[int32]string{
	0: "UNKNOWN",
	1: "TERMINATE",
	2: "KILL",
	3: "HANGUP",
	4: "INIT",
	5: "USER1",
	6: "USER2",
}

var Signals_value = map[string]int32{
	"UNKNOWN":   0,
	"TERMINATE": 1,
	"KILL":      2,
	"HANGUP":    3,
	"INIT":      4,
	"USER1":     5,
	"USER2":     6,
}

func (x Signals) String() string {
	return proto.EnumName(Signals_name, int32(x))
}

func (Signals) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{3}
}

type ArchiveFormat int32

const (
	ArchiveFormat_ARCHIVEUNKNOWN ArchiveFormat = 0
	ArchiveFormat_ARCHIVEAUTO    ArchiveFormat = 1
	ArchiveFormat_ARCHIVETARGZ   ArchiveFormat = 2
	ArchiveFormat_ARCHIVEZIP     ArchiveFormat = 3
)

var ArchiveFormat_name = map[int32]string{
	0: "ARCHIVEUNKNOWN",
	1: "ARCHIVEAUTO",
	2: "ARCHIVETARGZ",
	3: "ARCHIVEZIP",
}

var ArchiveFormat_value = map[string]int32{
	"ARCHIVEUNKNOWN": 0,
	"ARCHIVEAUTO":    1,
	"ARCHIVETARGZ":   2,
	"ARCHIVEZIP":     3,
}

func (x ArchiveFormat) String() string {
	return proto.EnumName(ArchiveFormat_name, int32(x))
}

func (ArchiveFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{4}
}

type SignalTriggerID int32

const (
	SignalTriggerID_NONE             SignalTriggerID = 0
	SignalTriggerID_CLEANTERMINATION SignalTriggerID = 1
)

var SignalTriggerID_name = map[int32]string{
	0: "NONE",
	1: "CLEANTERMINATION",
}

var SignalTriggerID_value = map[string]int32{
	"NONE":             0,
	"CLEANTERMINATION": 1,
}

func (x SignalTriggerID) String() string {
	return proto.EnumName(SignalTriggerID_name, int32(x))
}

func (SignalTriggerID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{5}
}

type Logger struct {
	LogType              LogType     `protobuf:"varint,1,opt,name=log_type,json=logType,proto3,enum=jasper.LogType" json:"log_type,omitempty"`
	LogOptions           *LogOptions `protobuf:"bytes,2,opt,name=log_options,json=logOptions,proto3" json:"log_options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Logger) Reset()         { *m = Logger{} }
func (m *Logger) String() string { return proto.CompactTextString(m) }
func (*Logger) ProtoMessage()    {}
func (*Logger) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{0}
}
func (m *Logger) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Logger.Unmarshal(m, b)
}
func (m *Logger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Logger.Marshal(b, m, deterministic)
}
func (m *Logger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Logger.Merge(m, src)
}
func (m *Logger) XXX_Size() int {
	return xxx_messageInfo_Logger.Size(m)
}
func (m *Logger) XXX_DiscardUnknown() {
	xxx_messageInfo_Logger.DiscardUnknown(m)
}

var xxx_messageInfo_Logger proto.InternalMessageInfo

func (m *Logger) GetLogType() LogType {
	if m != nil {
		return m.LogType
	}
	return LogType_LOGUNKNOWN
}

func (m *Logger) GetLogOptions() *LogOptions {
	if m != nil {
		return m.LogOptions
	}
	return nil
}

type OutputOptions struct {
	Loggers               []*Logger `protobuf:"bytes,1,rep,name=loggers,proto3" json:"loggers,omitempty"`
	SuppressOutput        bool      `protobuf:"varint,2,opt,name=suppress_output,json=suppressOutput,proto3" json:"suppress_output,omitempty"`
	SuppressError         bool      `protobuf:"varint,3,opt,name=suppress_error,json=suppressError,proto3" json:"suppress_error,omitempty"`
	RedirectOutputToError bool      `protobuf:"varint,4,opt,name=redirect_output_to_error,json=redirectOutputToError,proto3" json:"redirect_output_to_error,omitempty"`
	RedirectErrorToOutput bool      `protobuf:"varint,5,opt,name=redirect_error_to_output,json=redirectErrorToOutput,proto3" json:"redirect_error_to_output,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}  `json:"-"`
	XXX_unrecognized      []byte    `json:"-"`
	XXX_sizecache         int32     `json:"-"`
}

func (m *OutputOptions) Reset()         { *m = OutputOptions{} }
func (m *OutputOptions) String() string { return proto.CompactTextString(m) }
func (*OutputOptions) ProtoMessage()    {}
func (*OutputOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{1}
}
func (m *OutputOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutputOptions.Unmarshal(m, b)
}
func (m *OutputOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutputOptions.Marshal(b, m, deterministic)
}
func (m *OutputOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputOptions.Merge(m, src)
}
func (m *OutputOptions) XXX_Size() int {
	return xxx_messageInfo_OutputOptions.Size(m)
}
func (m *OutputOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputOptions.DiscardUnknown(m)
}

var xxx_messageInfo_OutputOptions proto.InternalMessageInfo

func (m *OutputOptions) GetLoggers() []*Logger {
	if m != nil {
		return m.Loggers
	}
	return nil
}

func (m *OutputOptions) GetSuppressOutput() bool {
	if m != nil {
		return m.SuppressOutput
	}
	return false
}

func (m *OutputOptions) GetSuppressError() bool {
	if m != nil {
		return m.SuppressError
	}
	return false
}

func (m *OutputOptions) GetRedirectOutputToError() bool {
	if m != nil {
		return m.RedirectOutputToError
	}
	return false
}

func (m *OutputOptions) GetRedirectErrorToOutput() bool {
	if m != nil {
		return m.RedirectErrorToOutput
	}
	return false
}

type LogOptions struct {
	BufferOptions        *BufferOptions      `protobuf:"bytes,1,opt,name=buffer_options,json=bufferOptions,proto3" json:"buffer_options,omitempty"`
	BuildloggerOptions   *BuildloggerOptions `protobuf:"bytes,2,opt,name=buildlogger_options,json=buildloggerOptions,proto3" json:"buildlogger_options,omitempty"`
	DefaultPrefix        string              `protobuf:"bytes,3,opt,name=default_prefix,json=defaultPrefix,proto3" json:"default_prefix,omitempty"`
	FileName             string              `protobuf:"bytes,4,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Format               LogFormat           `protobuf:"varint,5,opt,name=format,proto3,enum=jasper.LogFormat" json:"format,omitempty"`
	InMemoryCap          int64               `protobuf:"varint,6,opt,name=in_memory_cap,json=inMemoryCap,proto3" json:"in_memory_cap,omitempty"`
	SplunkOptions        *SplunkOptions      `protobuf:"bytes,7,opt,name=splunk_options,json=splunkOptions,proto3" json:"splunk_options,omitempty"`
	SumoEndpoint         string              `protobuf:"bytes,8,opt,name=sumo_endpoint,json=sumoEndpoint,proto3" json:"sumo_endpoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *LogOptions) Reset()         { *m = LogOptions{} }
func (m *LogOptions) String() string { return proto.CompactTextString(m) }
func (*LogOptions) ProtoMessage()    {}
func (*LogOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{2}
}
func (m *LogOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogOptions.Unmarshal(m, b)
}
func (m *LogOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogOptions.Marshal(b, m, deterministic)
}
func (m *LogOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogOptions.Merge(m, src)
}
func (m *LogOptions) XXX_Size() int {
	return xxx_messageInfo_LogOptions.Size(m)
}
func (m *LogOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_LogOptions.DiscardUnknown(m)
}

var xxx_messageInfo_LogOptions proto.InternalMessageInfo

func (m *LogOptions) GetBufferOptions() *BufferOptions {
	if m != nil {
		return m.BufferOptions
	}
	return nil
}

func (m *LogOptions) GetBuildloggerOptions() *BuildloggerOptions {
	if m != nil {
		return m.BuildloggerOptions
	}
	return nil
}

func (m *LogOptions) GetDefaultPrefix() string {
	if m != nil {
		return m.DefaultPrefix
	}
	return ""
}

func (m *LogOptions) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *LogOptions) GetFormat() LogFormat {
	if m != nil {
		return m.Format
	}
	return LogFormat_LOGFORMATUNKNOWN
}

func (m *LogOptions) GetInMemoryCap() int64 {
	if m != nil {
		return m.InMemoryCap
	}
	return 0
}

func (m *LogOptions) GetSplunkOptions() *SplunkOptions {
	if m != nil {
		return m.SplunkOptions
	}
	return nil
}

func (m *LogOptions) GetSumoEndpoint() string {
	if m != nil {
		return m.SumoEndpoint
	}
	return ""
}

type BufferOptions struct {
	Buffered             bool     `protobuf:"varint,1,opt,name=buffered,proto3" json:"buffered,omitempty"`
	Duration             int64    `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	MaxSize              int64    `protobuf:"varint,3,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BufferOptions) Reset()         { *m = BufferOptions{} }
func (m *BufferOptions) String() string { return proto.CompactTextString(m) }
func (*BufferOptions) ProtoMessage()    {}
func (*BufferOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{3}
}
func (m *BufferOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BufferOptions.Unmarshal(m, b)
}
func (m *BufferOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BufferOptions.Marshal(b, m, deterministic)
}
func (m *BufferOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BufferOptions.Merge(m, src)
}
func (m *BufferOptions) XXX_Size() int {
	return xxx_messageInfo_BufferOptions.Size(m)
}
func (m *BufferOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BufferOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BufferOptions proto.InternalMessageInfo

func (m *BufferOptions) GetBuffered() bool {
	if m != nil {
		return m.Buffered
	}
	return false
}

func (m *BufferOptions) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *BufferOptions) GetMaxSize() int64 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

type BuildloggerOptions struct {
	CreateTest           bool     `protobuf:"varint,1,opt,name=create_test,json=createTest,proto3" json:"create_test,omitempty"`
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Number               int64    `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	Phase                string   `protobuf:"bytes,4,opt,name=phase,proto3" json:"phase,omitempty"`
	Builder              string   `protobuf:"bytes,5,opt,name=builder,proto3" json:"builder,omitempty"`
	Test                 string   `protobuf:"bytes,6,opt,name=test,proto3" json:"test,omitempty"`
	Command              string   `protobuf:"bytes,7,opt,name=command,proto3" json:"command,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildloggerOptions) Reset()         { *m = BuildloggerOptions{} }
func (m *BuildloggerOptions) String() string { return proto.CompactTextString(m) }
func (*BuildloggerOptions) ProtoMessage()    {}
func (*BuildloggerOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{4}
}
func (m *BuildloggerOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildloggerOptions.Unmarshal(m, b)
}
func (m *BuildloggerOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildloggerOptions.Marshal(b, m, deterministic)
}
func (m *BuildloggerOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildloggerOptions.Merge(m, src)
}
func (m *BuildloggerOptions) XXX_Size() int {
	return xxx_messageInfo_BuildloggerOptions.Size(m)
}
func (m *BuildloggerOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildloggerOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BuildloggerOptions proto.InternalMessageInfo

func (m *BuildloggerOptions) GetCreateTest() bool {
	if m != nil {
		return m.CreateTest
	}
	return false
}

func (m *BuildloggerOptions) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *BuildloggerOptions) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *BuildloggerOptions) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *BuildloggerOptions) GetBuilder() string {
	if m != nil {
		return m.Builder
	}
	return ""
}

func (m *BuildloggerOptions) GetTest() string {
	if m != nil {
		return m.Test
	}
	return ""
}

func (m *BuildloggerOptions) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

type SplunkOptions struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Channel              string   `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SplunkOptions) Reset()         { *m = SplunkOptions{} }
func (m *SplunkOptions) String() string { return proto.CompactTextString(m) }
func (*SplunkOptions) ProtoMessage()    {}
func (*SplunkOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{5}
}
func (m *SplunkOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SplunkOptions.Unmarshal(m, b)
}
func (m *SplunkOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SplunkOptions.Marshal(b, m, deterministic)
}
func (m *SplunkOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplunkOptions.Merge(m, src)
}
func (m *SplunkOptions) XXX_Size() int {
	return xxx_messageInfo_SplunkOptions.Size(m)
}
func (m *SplunkOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SplunkOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SplunkOptions proto.InternalMessageInfo

func (m *SplunkOptions) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *SplunkOptions) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SplunkOptions) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

type CreateOptions struct {
	Args                 []string          `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	WorkingDirectory     string            `protobuf:"bytes,2,opt,name=working_directory,json=workingDirectory,proto3" json:"working_directory,omitempty"`
	Environment          map[string]string `protobuf:"bytes,3,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OverrideEnviron      bool              `protobuf:"varint,4,opt,name=override_environ,json=overrideEnviron,proto3" json:"override_environ,omitempty"`
	TimeoutSeconds       int64             `protobuf:"varint,5,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	Tags                 []string          `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	OnSuccess            []*CreateOptions  `protobuf:"bytes,7,rep,name=on_success,json=onSuccess,proto3" json:"on_success,omitempty"`
	OnFailure            []*CreateOptions  `protobuf:"bytes,8,rep,name=on_failure,json=onFailure,proto3" json:"on_failure,omitempty"`
	OnTimeout            []*CreateOptions  `protobuf:"bytes,9,rep,name=on_timeout,json=onTimeout,proto3" json:"on_timeout,omitempty"`
	Output               *OutputOptions    `protobuf:"bytes,10,opt,name=output,proto3" json:"output,omitempty"`
	StandardInputBytes   []byte            `protobuf:"bytes,11,opt,name=standard_input_bytes,json=standardInputBytes,proto3" json:"standard_input_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateOptions) Reset()         { *m = CreateOptions{} }
func (m *CreateOptions) String() string { return proto.CompactTextString(m) }
func (*CreateOptions) ProtoMessage()    {}
func (*CreateOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{6}
}
func (m *CreateOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateOptions.Unmarshal(m, b)
}
func (m *CreateOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateOptions.Marshal(b, m, deterministic)
}
func (m *CreateOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOptions.Merge(m, src)
}
func (m *CreateOptions) XXX_Size() int {
	return xxx_messageInfo_CreateOptions.Size(m)
}
func (m *CreateOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOptions proto.InternalMessageInfo

func (m *CreateOptions) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *CreateOptions) GetWorkingDirectory() string {
	if m != nil {
		return m.WorkingDirectory
	}
	return ""
}

func (m *CreateOptions) GetEnvironment() map[string]string {
	if m != nil {
		return m.Environment
	}
	return nil
}

func (m *CreateOptions) GetOverrideEnviron() bool {
	if m != nil {
		return m.OverrideEnviron
	}
	return false
}

func (m *CreateOptions) GetTimeoutSeconds() int64 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

func (m *CreateOptions) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *CreateOptions) GetOnSuccess() []*CreateOptions {
	if m != nil {
		return m.OnSuccess
	}
	return nil
}

func (m *CreateOptions) GetOnFailure() []*CreateOptions {
	if m != nil {
		return m.OnFailure
	}
	return nil
}

func (m *CreateOptions) GetOnTimeout() []*CreateOptions {
	if m != nil {
		return m.OnTimeout
	}
	return nil
}

func (m *CreateOptions) GetOutput() *OutputOptions {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *CreateOptions) GetStandardInputBytes() []byte {
	if m != nil {
		return m.StandardInputBytes
	}
	return nil
}

type IDResponse struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDResponse) Reset()         { *m = IDResponse{} }
func (m *IDResponse) String() string { return proto.CompactTextString(m) }
func (*IDResponse) ProtoMessage()    {}
func (*IDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{7}
}
func (m *IDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IDResponse.Unmarshal(m, b)
}
func (m *IDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IDResponse.Marshal(b, m, deterministic)
}
func (m *IDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDResponse.Merge(m, src)
}
func (m *IDResponse) XXX_Size() int {
	return xxx_messageInfo_IDResponse.Size(m)
}
func (m *IDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IDResponse proto.InternalMessageInfo

func (m *IDResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ProcessInfo struct {
	Id                   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Pid                  int64          `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	HostId               string         `protobuf:"bytes,3,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Running              bool           `protobuf:"varint,4,opt,name=running,proto3" json:"running,omitempty"`
	Successful           bool           `protobuf:"varint,5,opt,name=successful,proto3" json:"successful,omitempty"`
	Complete             bool           `protobuf:"varint,6,opt,name=complete,proto3" json:"complete,omitempty"`
	Timedout             bool           `protobuf:"varint,7,opt,name=timedout,proto3" json:"timedout,omitempty"`
	Options              *CreateOptions `protobuf:"bytes,8,opt,name=options,proto3" json:"options,omitempty"`
	ExitCode             int32          `protobuf:"varint,9,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ProcessInfo) Reset()         { *m = ProcessInfo{} }
func (m *ProcessInfo) String() string { return proto.CompactTextString(m) }
func (*ProcessInfo) ProtoMessage()    {}
func (*ProcessInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{8}
}
func (m *ProcessInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessInfo.Unmarshal(m, b)
}
func (m *ProcessInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessInfo.Marshal(b, m, deterministic)
}
func (m *ProcessInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessInfo.Merge(m, src)
}
func (m *ProcessInfo) XXX_Size() int {
	return xxx_messageInfo_ProcessInfo.Size(m)
}
func (m *ProcessInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessInfo proto.InternalMessageInfo

func (m *ProcessInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProcessInfo) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ProcessInfo) GetHostId() string {
	if m != nil {
		return m.HostId
	}
	return ""
}

func (m *ProcessInfo) GetRunning() bool {
	if m != nil {
		return m.Running
	}
	return false
}

func (m *ProcessInfo) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func (m *ProcessInfo) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

func (m *ProcessInfo) GetTimedout() bool {
	if m != nil {
		return m.Timedout
	}
	return false
}

func (m *ProcessInfo) GetOptions() *CreateOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *ProcessInfo) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

type StatusResponse struct {
	HostId               string   `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	Active               bool     `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{9}
}
func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusResponse.Unmarshal(m, b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return xxx_messageInfo_StatusResponse.Size(m)
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetHostId() string {
	if m != nil {
		return m.HostId
	}
	return ""
}

func (m *StatusResponse) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type Filter struct {
	Name                 FilterSpecifications `protobuf:"varint,1,opt,name=name,proto3,enum=jasper.FilterSpecifications" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Filter) Reset()         { *m = Filter{} }
func (m *Filter) String() string { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()    {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{10}
}
func (m *Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Filter.Unmarshal(m, b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
}
func (m *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(m, src)
}
func (m *Filter) XXX_Size() int {
	return xxx_messageInfo_Filter.Size(m)
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func (m *Filter) GetName() FilterSpecifications {
	if m != nil {
		return m.Name
	}
	return FilterSpecifications_ALL
}

type SignalProcess struct {
	ProcessID            *JasperProcessID `protobuf:"bytes,1,opt,name=ProcessID,proto3" json:"ProcessID,omitempty"`
	Signal               Signals          `protobuf:"varint,2,opt,name=signal,proto3,enum=jasper.Signals" json:"signal,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SignalProcess) Reset()         { *m = SignalProcess{} }
func (m *SignalProcess) String() string { return proto.CompactTextString(m) }
func (*SignalProcess) ProtoMessage()    {}
func (*SignalProcess) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{11}
}
func (m *SignalProcess) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignalProcess.Unmarshal(m, b)
}
func (m *SignalProcess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignalProcess.Marshal(b, m, deterministic)
}
func (m *SignalProcess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalProcess.Merge(m, src)
}
func (m *SignalProcess) XXX_Size() int {
	return xxx_messageInfo_SignalProcess.Size(m)
}
func (m *SignalProcess) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalProcess.DiscardUnknown(m)
}

var xxx_messageInfo_SignalProcess proto.InternalMessageInfo

func (m *SignalProcess) GetProcessID() *JasperProcessID {
	if m != nil {
		return m.ProcessID
	}
	return nil
}

func (m *SignalProcess) GetSignal() Signals {
	if m != nil {
		return m.Signal
	}
	return Signals_UNKNOWN
}

type TagName struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagName) Reset()         { *m = TagName{} }
func (m *TagName) String() string { return proto.CompactTextString(m) }
func (*TagName) ProtoMessage()    {}
func (*TagName) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{12}
}
func (m *TagName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TagName.Unmarshal(m, b)
}
func (m *TagName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TagName.Marshal(b, m, deterministic)
}
func (m *TagName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagName.Merge(m, src)
}
func (m *TagName) XXX_Size() int {
	return xxx_messageInfo_TagName.Size(m)
}
func (m *TagName) XXX_DiscardUnknown() {
	xxx_messageInfo_TagName.DiscardUnknown(m)
}

var xxx_messageInfo_TagName proto.InternalMessageInfo

func (m *TagName) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ProcessTags struct {
	ProcessID            string   `protobuf:"bytes,1,opt,name=processID,proto3" json:"processID,omitempty"`
	Tags                 []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessTags) Reset()         { *m = ProcessTags{} }
func (m *ProcessTags) String() string { return proto.CompactTextString(m) }
func (*ProcessTags) ProtoMessage()    {}
func (*ProcessTags) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{13}
}
func (m *ProcessTags) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessTags.Unmarshal(m, b)
}
func (m *ProcessTags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessTags.Marshal(b, m, deterministic)
}
func (m *ProcessTags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessTags.Merge(m, src)
}
func (m *ProcessTags) XXX_Size() int {
	return xxx_messageInfo_ProcessTags.Size(m)
}
func (m *ProcessTags) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessTags.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessTags proto.InternalMessageInfo

func (m *ProcessTags) GetProcessID() string {
	if m != nil {
		return m.ProcessID
	}
	return ""
}

func (m *ProcessTags) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type JasperProcessID struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JasperProcessID) Reset()         { *m = JasperProcessID{} }
func (m *JasperProcessID) String() string { return proto.CompactTextString(m) }
func (*JasperProcessID) ProtoMessage()    {}
func (*JasperProcessID) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{14}
}
func (m *JasperProcessID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JasperProcessID.Unmarshal(m, b)
}
func (m *JasperProcessID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JasperProcessID.Marshal(b, m, deterministic)
}
func (m *JasperProcessID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JasperProcessID.Merge(m, src)
}
func (m *JasperProcessID) XXX_Size() int {
	return xxx_messageInfo_JasperProcessID.Size(m)
}
func (m *JasperProcessID) XXX_DiscardUnknown() {
	xxx_messageInfo_JasperProcessID.DiscardUnknown(m)
}

var xxx_messageInfo_JasperProcessID proto.InternalMessageInfo

func (m *JasperProcessID) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type OperationOutcome struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	ExitCode             int32    `protobuf:"varint,3,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OperationOutcome) Reset()         { *m = OperationOutcome{} }
func (m *OperationOutcome) String() string { return proto.CompactTextString(m) }
func (*OperationOutcome) ProtoMessage()    {}
func (*OperationOutcome) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{15}
}
func (m *OperationOutcome) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OperationOutcome.Unmarshal(m, b)
}
func (m *OperationOutcome) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OperationOutcome.Marshal(b, m, deterministic)
}
func (m *OperationOutcome) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationOutcome.Merge(m, src)
}
func (m *OperationOutcome) XXX_Size() int {
	return xxx_messageInfo_OperationOutcome.Size(m)
}
func (m *OperationOutcome) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationOutcome.DiscardUnknown(m)
}

var xxx_messageInfo_OperationOutcome proto.InternalMessageInfo

func (m *OperationOutcome) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *OperationOutcome) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *OperationOutcome) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

type BuildOptions struct {
	Target               string   `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Arch                 string   `protobuf:"bytes,2,opt,name=arch,proto3" json:"arch,omitempty"`
	Edition              string   `protobuf:"bytes,3,opt,name=edition,proto3" json:"edition,omitempty"`
	Debug                bool     `protobuf:"varint,4,opt,name=debug,proto3" json:"debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildOptions) Reset()         { *m = BuildOptions{} }
func (m *BuildOptions) String() string { return proto.CompactTextString(m) }
func (*BuildOptions) ProtoMessage()    {}
func (*BuildOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{16}
}
func (m *BuildOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildOptions.Unmarshal(m, b)
}
func (m *BuildOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildOptions.Marshal(b, m, deterministic)
}
func (m *BuildOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildOptions.Merge(m, src)
}
func (m *BuildOptions) XXX_Size() int {
	return xxx_messageInfo_BuildOptions.Size(m)
}
func (m *BuildOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildOptions.DiscardUnknown(m)
}

var xxx_messageInfo_BuildOptions proto.InternalMessageInfo

func (m *BuildOptions) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *BuildOptions) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *BuildOptions) GetEdition() string {
	if m != nil {
		return m.Edition
	}
	return ""
}

func (m *BuildOptions) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

type MongoDBDownloadOptions struct {
	BuildOpts            *BuildOptions `protobuf:"bytes,1,opt,name=build_opts,json=buildOpts,proto3" json:"build_opts,omitempty"`
	Path                 string        `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Releases             []string      `protobuf:"bytes,3,rep,name=releases,proto3" json:"releases,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MongoDBDownloadOptions) Reset()         { *m = MongoDBDownloadOptions{} }
func (m *MongoDBDownloadOptions) String() string { return proto.CompactTextString(m) }
func (*MongoDBDownloadOptions) ProtoMessage()    {}
func (*MongoDBDownloadOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{17}
}
func (m *MongoDBDownloadOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MongoDBDownloadOptions.Unmarshal(m, b)
}
func (m *MongoDBDownloadOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MongoDBDownloadOptions.Marshal(b, m, deterministic)
}
func (m *MongoDBDownloadOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MongoDBDownloadOptions.Merge(m, src)
}
func (m *MongoDBDownloadOptions) XXX_Size() int {
	return xxx_messageInfo_MongoDBDownloadOptions.Size(m)
}
func (m *MongoDBDownloadOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_MongoDBDownloadOptions.DiscardUnknown(m)
}

var xxx_messageInfo_MongoDBDownloadOptions proto.InternalMessageInfo

func (m *MongoDBDownloadOptions) GetBuildOpts() *BuildOptions {
	if m != nil {
		return m.BuildOpts
	}
	return nil
}

func (m *MongoDBDownloadOptions) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *MongoDBDownloadOptions) GetReleases() []string {
	if m != nil {
		return m.Releases
	}
	return nil
}

type CacheOptions struct {
	Disabled             bool     `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	PruneDelaySeconds    int64    `protobuf:"varint,2,opt,name=prune_delay_seconds,json=pruneDelaySeconds,proto3" json:"prune_delay_seconds,omitempty"`
	MaxSize              int64    `protobuf:"varint,3,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CacheOptions) Reset()         { *m = CacheOptions{} }
func (m *CacheOptions) String() string { return proto.CompactTextString(m) }
func (*CacheOptions) ProtoMessage()    {}
func (*CacheOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{18}
}
func (m *CacheOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CacheOptions.Unmarshal(m, b)
}
func (m *CacheOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CacheOptions.Marshal(b, m, deterministic)
}
func (m *CacheOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheOptions.Merge(m, src)
}
func (m *CacheOptions) XXX_Size() int {
	return xxx_messageInfo_CacheOptions.Size(m)
}
func (m *CacheOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CacheOptions proto.InternalMessageInfo

func (m *CacheOptions) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *CacheOptions) GetPruneDelaySeconds() int64 {
	if m != nil {
		return m.PruneDelaySeconds
	}
	return 0
}

func (m *CacheOptions) GetMaxSize() int64 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

type ArchiveOptions struct {
	ShouldExtract        bool          `protobuf:"varint,1,opt,name=should_extract,json=shouldExtract,proto3" json:"should_extract,omitempty"`
	Format               ArchiveFormat `protobuf:"varint,2,opt,name=format,proto3,enum=jasper.ArchiveFormat" json:"format,omitempty"`
	TargetPath           string        `protobuf:"bytes,3,opt,name=target_path,json=targetPath,proto3" json:"target_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ArchiveOptions) Reset()         { *m = ArchiveOptions{} }
func (m *ArchiveOptions) String() string { return proto.CompactTextString(m) }
func (*ArchiveOptions) ProtoMessage()    {}
func (*ArchiveOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{19}
}
func (m *ArchiveOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArchiveOptions.Unmarshal(m, b)
}
func (m *ArchiveOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArchiveOptions.Marshal(b, m, deterministic)
}
func (m *ArchiveOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveOptions.Merge(m, src)
}
func (m *ArchiveOptions) XXX_Size() int {
	return xxx_messageInfo_ArchiveOptions.Size(m)
}
func (m *ArchiveOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveOptions proto.InternalMessageInfo

func (m *ArchiveOptions) GetShouldExtract() bool {
	if m != nil {
		return m.ShouldExtract
	}
	return false
}

func (m *ArchiveOptions) GetFormat() ArchiveFormat {
	if m != nil {
		return m.Format
	}
	return ArchiveFormat_ARCHIVEUNKNOWN
}

func (m *ArchiveOptions) GetTargetPath() string {
	if m != nil {
		return m.TargetPath
	}
	return ""
}

type DownloadInfo struct {
	Url                  string          `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Path                 string          `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	ArchiveOpts          *ArchiveOptions `protobuf:"bytes,3,opt,name=archive_opts,json=archiveOpts,proto3" json:"archive_opts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DownloadInfo) Reset()         { *m = DownloadInfo{} }
func (m *DownloadInfo) String() string { return proto.CompactTextString(m) }
func (*DownloadInfo) ProtoMessage()    {}
func (*DownloadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{20}
}
func (m *DownloadInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownloadInfo.Unmarshal(m, b)
}
func (m *DownloadInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownloadInfo.Marshal(b, m, deterministic)
}
func (m *DownloadInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadInfo.Merge(m, src)
}
func (m *DownloadInfo) XXX_Size() int {
	return xxx_messageInfo_DownloadInfo.Size(m)
}
func (m *DownloadInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadInfo proto.InternalMessageInfo

func (m *DownloadInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *DownloadInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *DownloadInfo) GetArchiveOpts() *ArchiveOptions {
	if m != nil {
		return m.ArchiveOpts
	}
	return nil
}

type WriteFileInfo struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Content              []byte   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Perm                 uint32   `protobuf:"varint,3,opt,name=perm,proto3" json:"perm,omitempty"`
	Append               bool     `protobuf:"varint,4,opt,name=append,proto3" json:"append,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteFileInfo) Reset()         { *m = WriteFileInfo{} }
func (m *WriteFileInfo) String() string { return proto.CompactTextString(m) }
func (*WriteFileInfo) ProtoMessage()    {}
func (*WriteFileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{21}
}
func (m *WriteFileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteFileInfo.Unmarshal(m, b)
}
func (m *WriteFileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteFileInfo.Marshal(b, m, deterministic)
}
func (m *WriteFileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteFileInfo.Merge(m, src)
}
func (m *WriteFileInfo) XXX_Size() int {
	return xxx_messageInfo_WriteFileInfo.Size(m)
}
func (m *WriteFileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteFileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WriteFileInfo proto.InternalMessageInfo

func (m *WriteFileInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *WriteFileInfo) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *WriteFileInfo) GetPerm() uint32 {
	if m != nil {
		return m.Perm
	}
	return 0
}

func (m *WriteFileInfo) GetAppend() bool {
	if m != nil {
		return m.Append
	}
	return false
}

type BuildloggerURLs struct {
	Urls                 []string `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildloggerURLs) Reset()         { *m = BuildloggerURLs{} }
func (m *BuildloggerURLs) String() string { return proto.CompactTextString(m) }
func (*BuildloggerURLs) ProtoMessage()    {}
func (*BuildloggerURLs) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{22}
}
func (m *BuildloggerURLs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildloggerURLs.Unmarshal(m, b)
}
func (m *BuildloggerURLs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildloggerURLs.Marshal(b, m, deterministic)
}
func (m *BuildloggerURLs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildloggerURLs.Merge(m, src)
}
func (m *BuildloggerURLs) XXX_Size() int {
	return xxx_messageInfo_BuildloggerURLs.Size(m)
}
func (m *BuildloggerURLs) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildloggerURLs.DiscardUnknown(m)
}

var xxx_messageInfo_BuildloggerURLs proto.InternalMessageInfo

func (m *BuildloggerURLs) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

type LogRequest struct {
	Id                   *JasperProcessID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Count                int64            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *LogRequest) Reset()         { *m = LogRequest{} }
func (m *LogRequest) String() string { return proto.CompactTextString(m) }
func (*LogRequest) ProtoMessage()    {}
func (*LogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{23}
}
func (m *LogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogRequest.Unmarshal(m, b)
}
func (m *LogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogRequest.Marshal(b, m, deterministic)
}
func (m *LogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRequest.Merge(m, src)
}
func (m *LogRequest) XXX_Size() int {
	return xxx_messageInfo_LogRequest.Size(m)
}
func (m *LogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogRequest proto.InternalMessageInfo

func (m *LogRequest) GetId() *JasperProcessID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *LogRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type LogStream struct {
	Logs                 []string `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	Done                 bool     `protobuf:"varint,2,opt,name=done,proto3" json:"done,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogStream) Reset()         { *m = LogStream{} }
func (m *LogStream) String() string { return proto.CompactTextString(m) }
func (*LogStream) ProtoMessage()    {}
func (*LogStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{24}
}
func (m *LogStream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogStream.Unmarshal(m, b)
}
func (m *LogStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogStream.Marshal(b, m, deterministic)
}
func (m *LogStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogStream.Merge(m, src)
}
func (m *LogStream) XXX_Size() int {
	return xxx_messageInfo_LogStream.Size(m)
}
func (m *LogStream) XXX_DiscardUnknown() {
	xxx_messageInfo_LogStream.DiscardUnknown(m)
}

var xxx_messageInfo_LogStream proto.InternalMessageInfo

func (m *LogStream) GetLogs() []string {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *LogStream) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

type SignalTriggerParams struct {
	ProcessID            *JasperProcessID `protobuf:"bytes,1,opt,name=processID,proto3" json:"processID,omitempty"`
	SignalTriggerID      SignalTriggerID  `protobuf:"varint,2,opt,name=signalTriggerID,proto3,enum=jasper.SignalTriggerID" json:"signalTriggerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SignalTriggerParams) Reset()         { *m = SignalTriggerParams{} }
func (m *SignalTriggerParams) String() string { return proto.CompactTextString(m) }
func (*SignalTriggerParams) ProtoMessage()    {}
func (*SignalTriggerParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{25}
}
func (m *SignalTriggerParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignalTriggerParams.Unmarshal(m, b)
}
func (m *SignalTriggerParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignalTriggerParams.Marshal(b, m, deterministic)
}
func (m *SignalTriggerParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalTriggerParams.Merge(m, src)
}
func (m *SignalTriggerParams) XXX_Size() int {
	return xxx_messageInfo_SignalTriggerParams.Size(m)
}
func (m *SignalTriggerParams) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalTriggerParams.DiscardUnknown(m)
}

var xxx_messageInfo_SignalTriggerParams proto.InternalMessageInfo

func (m *SignalTriggerParams) GetProcessID() *JasperProcessID {
	if m != nil {
		return m.ProcessID
	}
	return nil
}

func (m *SignalTriggerParams) GetSignalTriggerID() SignalTriggerID {
	if m != nil {
		return m.SignalTriggerID
	}
	return SignalTriggerID_NONE
}

type EventName struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventName) Reset()         { *m = EventName{} }
func (m *EventName) String() string { return proto.CompactTextString(m) }
func (*EventName) ProtoMessage()    {}
func (*EventName) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30110796082ce8e, []int{26}
}
func (m *EventName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventName.Unmarshal(m, b)
}
func (m *EventName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventName.Marshal(b, m, deterministic)
}
func (m *EventName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventName.Merge(m, src)
}
func (m *EventName) XXX_Size() int {
	return xxx_messageInfo_EventName.Size(m)
}
func (m *EventName) XXX_DiscardUnknown() {
	xxx_messageInfo_EventName.DiscardUnknown(m)
}

var xxx_messageInfo_EventName proto.InternalMessageInfo

func (m *EventName) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Logger)(nil), "jasper.Logger")
	proto.RegisterType((*OutputOptions)(nil), "jasper.OutputOptions")
	proto.RegisterType((*LogOptions)(nil), "jasper.LogOptions")
	proto.RegisterType((*BufferOptions)(nil), "jasper.BufferOptions")
	proto.RegisterType((*BuildloggerOptions)(nil), "jasper.BuildloggerOptions")
	proto.RegisterType((*SplunkOptions)(nil), "jasper.SplunkOptions")
	proto.RegisterType((*CreateOptions)(nil), "jasper.CreateOptions")
	proto.RegisterMapType((map[string]string)(nil), "jasper.CreateOptions.EnvironmentEntry")
	proto.RegisterType((*IDResponse)(nil), "jasper.IDResponse")
	proto.RegisterType((*ProcessInfo)(nil), "jasper.ProcessInfo")
	proto.RegisterType((*StatusResponse)(nil), "jasper.StatusResponse")
	proto.RegisterType((*Filter)(nil), "jasper.Filter")
	proto.RegisterType((*SignalProcess)(nil), "jasper.SignalProcess")
	proto.RegisterType((*TagName)(nil), "jasper.TagName")
	proto.RegisterType((*ProcessTags)(nil), "jasper.ProcessTags")
	proto.RegisterType((*JasperProcessID)(nil), "jasper.JasperProcessID")
	proto.RegisterType((*OperationOutcome)(nil), "jasper.OperationOutcome")
	proto.RegisterType((*BuildOptions)(nil), "jasper.BuildOptions")
	proto.RegisterType((*MongoDBDownloadOptions)(nil), "jasper.MongoDBDownloadOptions")
	proto.RegisterType((*CacheOptions)(nil), "jasper.CacheOptions")
	proto.RegisterType((*ArchiveOptions)(nil), "jasper.ArchiveOptions")
	proto.RegisterType((*DownloadInfo)(nil), "jasper.DownloadInfo")
	proto.RegisterType((*WriteFileInfo)(nil), "jasper.WriteFileInfo")
	proto.RegisterType((*BuildloggerURLs)(nil), "jasper.BuildloggerURLs")
	proto.RegisterType((*LogRequest)(nil), "jasper.LogRequest")
	proto.RegisterType((*LogStream)(nil), "jasper.LogStream")
	proto.RegisterType((*SignalTriggerParams)(nil), "jasper.SignalTriggerParams")
	proto.RegisterType((*EventName)(nil), "jasper.EventName")
	proto.RegisterEnum("jasper.LogType", LogType_name, LogType_value)
	proto.RegisterEnum("jasper.LogFormat", LogFormat_name, LogFormat_value)
	proto.RegisterEnum("jasper.FilterSpecifications", FilterSpecifications_name, FilterSpecifications_value)
	proto.RegisterEnum("jasper.Signals", Signals_name, Signals_value)
	proto.RegisterEnum("jasper.ArchiveFormat", ArchiveFormat_name, ArchiveFormat_value)
	proto.RegisterEnum("jasper.SignalTriggerID", SignalTriggerID_name, SignalTriggerID_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JasperProcessManagerClient is the client API for JasperProcessManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JasperProcessManagerClient interface {
	// Manager functions
	ID(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IDResponse, error)
	Create(ctx context.Context, in *CreateOptions, opts ...grpc.CallOption) (*ProcessInfo, error)
	List(ctx context.Context, in *Filter, opts ...grpc.CallOption) (JasperProcessManager_ListClient, error)
	Group(ctx context.Context, in *TagName, opts ...grpc.CallOption) (JasperProcessManager_GroupClient, error)
	Get(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*ProcessInfo, error)
	Signal(ctx context.Context, in *SignalProcess, opts ...grpc.CallOption) (*OperationOutcome, error)
	Clear(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OperationOutcome, error)
	Close(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OperationOutcome, error)
	// Process functions
	TagProcess(ctx context.Context, in *ProcessTags, opts ...grpc.CallOption) (*OperationOutcome, error)
	ResetTags(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*OperationOutcome, error)
	GetTags(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*ProcessTags, error)
	RegisterSignalTriggerID(ctx context.Context, in *SignalTriggerParams, opts ...grpc.CallOption) (*OperationOutcome, error)
	Wait(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*OperationOutcome, error)
	Respawn(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*ProcessInfo, error)
	// RPC-specific functions
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	ConfigureCache(ctx context.Context, in *CacheOptions, opts ...grpc.CallOption) (*OperationOutcome, error)
	DownloadFile(ctx context.Context, in *DownloadInfo, opts ...grpc.CallOption) (*OperationOutcome, error)
	DownloadMongoDB(ctx context.Context, in *MongoDBDownloadOptions, opts ...grpc.CallOption) (*OperationOutcome, error)
	GetLogStream(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogStream, error)
	GetBuildloggerURLs(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*BuildloggerURLs, error)
	SignalEvent(ctx context.Context, in *EventName, opts ...grpc.CallOption) (*OperationOutcome, error)
	WriteFile(ctx context.Context, opts ...grpc.CallOption) (JasperProcessManager_WriteFileClient, error)
}

type jasperProcessManagerClient struct {
	cc *grpc.ClientConn
}

func NewJasperProcessManagerClient(cc *grpc.ClientConn) JasperProcessManagerClient {
	return &jasperProcessManagerClient{cc}
}

func (c *jasperProcessManagerClient) ID(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IDResponse, error) {
	out := new(IDResponse)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Create(ctx context.Context, in *CreateOptions, opts ...grpc.CallOption) (*ProcessInfo, error) {
	out := new(ProcessInfo)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) List(ctx context.Context, in *Filter, opts ...grpc.CallOption) (JasperProcessManager_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JasperProcessManager_serviceDesc.Streams[0], "/jasper.JasperProcessManager/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &jasperProcessManagerListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JasperProcessManager_ListClient interface {
	Recv() (*ProcessInfo, error)
	grpc.ClientStream
}

type jasperProcessManagerListClient struct {
	grpc.ClientStream
}

func (x *jasperProcessManagerListClient) Recv() (*ProcessInfo, error) {
	m := new(ProcessInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jasperProcessManagerClient) Group(ctx context.Context, in *TagName, opts ...grpc.CallOption) (JasperProcessManager_GroupClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JasperProcessManager_serviceDesc.Streams[1], "/jasper.JasperProcessManager/Group", opts...)
	if err != nil {
		return nil, err
	}
	x := &jasperProcessManagerGroupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JasperProcessManager_GroupClient interface {
	Recv() (*ProcessInfo, error)
	grpc.ClientStream
}

type jasperProcessManagerGroupClient struct {
	grpc.ClientStream
}

func (x *jasperProcessManagerGroupClient) Recv() (*ProcessInfo, error) {
	m := new(ProcessInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jasperProcessManagerClient) Get(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*ProcessInfo, error) {
	out := new(ProcessInfo)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Signal(ctx context.Context, in *SignalProcess, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Signal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Clear(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Clear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Close(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) TagProcess(ctx context.Context, in *ProcessTags, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/TagProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ResetTags(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ResetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) GetTags(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*ProcessTags, error) {
	out := new(ProcessTags)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/GetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) RegisterSignalTriggerID(ctx context.Context, in *SignalTriggerParams, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/RegisterSignalTriggerID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Wait(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Wait", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Respawn(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*ProcessInfo, error) {
	out := new(ProcessInfo)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Respawn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) ConfigureCache(ctx context.Context, in *CacheOptions, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/ConfigureCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) DownloadFile(ctx context.Context, in *DownloadInfo, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/DownloadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) DownloadMongoDB(ctx context.Context, in *MongoDBDownloadOptions, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/DownloadMongoDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) GetLogStream(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogStream, error) {
	out := new(LogStream)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/GetLogStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) GetBuildloggerURLs(ctx context.Context, in *JasperProcessID, opts ...grpc.CallOption) (*BuildloggerURLs, error) {
	out := new(BuildloggerURLs)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/GetBuildloggerURLs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) SignalEvent(ctx context.Context, in *EventName, opts ...grpc.CallOption) (*OperationOutcome, error) {
	out := new(OperationOutcome)
	err := c.cc.Invoke(ctx, "/jasper.JasperProcessManager/SignalEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jasperProcessManagerClient) WriteFile(ctx context.Context, opts ...grpc.CallOption) (JasperProcessManager_WriteFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JasperProcessManager_serviceDesc.Streams[2], "/jasper.JasperProcessManager/WriteFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &jasperProcessManagerWriteFileClient{stream}
	return x, nil
}

type JasperProcessManager_WriteFileClient interface {
	Send(*WriteFileInfo) error
	CloseAndRecv() (*OperationOutcome, error)
	grpc.ClientStream
}

type jasperProcessManagerWriteFileClient struct {
	grpc.ClientStream
}

func (x *jasperProcessManagerWriteFileClient) Send(m *WriteFileInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jasperProcessManagerWriteFileClient) CloseAndRecv() (*OperationOutcome, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(OperationOutcome)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JasperProcessManagerServer is the server API for JasperProcessManager service.
type JasperProcessManagerServer interface {
	// Manager functions
	ID(context.Context, *empty.Empty) (*IDResponse, error)
	Create(context.Context, *CreateOptions) (*ProcessInfo, error)
	List(*Filter, JasperProcessManager_ListServer) error
	Group(*TagName, JasperProcessManager_GroupServer) error
	Get(context.Context, *JasperProcessID) (*ProcessInfo, error)
	Signal(context.Context, *SignalProcess) (*OperationOutcome, error)
	Clear(context.Context, *empty.Empty) (*OperationOutcome, error)
	Close(context.Context, *empty.Empty) (*OperationOutcome, error)
	// Process functions
	TagProcess(context.Context, *ProcessTags) (*OperationOutcome, error)
	ResetTags(context.Context, *JasperProcessID) (*OperationOutcome, error)
	GetTags(context.Context, *JasperProcessID) (*ProcessTags, error)
	RegisterSignalTriggerID(context.Context, *SignalTriggerParams) (*OperationOutcome, error)
	Wait(context.Context, *JasperProcessID) (*OperationOutcome, error)
	Respawn(context.Context, *JasperProcessID) (*ProcessInfo, error)
	// RPC-specific functions
	Status(context.Context, *empty.Empty) (*StatusResponse, error)
	ConfigureCache(context.Context, *CacheOptions) (*OperationOutcome, error)
	DownloadFile(context.Context, *DownloadInfo) (*OperationOutcome, error)
	DownloadMongoDB(context.Context, *MongoDBDownloadOptions) (*OperationOutcome, error)
	GetLogStream(context.Context, *LogRequest) (*LogStream, error)
	GetBuildloggerURLs(context.Context, *JasperProcessID) (*BuildloggerURLs, error)
	SignalEvent(context.Context, *EventName) (*OperationOutcome, error)
	WriteFile(JasperProcessManager_WriteFileServer) error
}

func RegisterJasperProcessManagerServer(s *grpc.Server, srv JasperProcessManagerServer) {
	s.RegisterService(&_JasperProcessManager_serviceDesc, srv)
}

func _JasperProcessManager_ID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ID(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Create(ctx, req.(*CreateOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JasperProcessManagerServer).List(m, &jasperProcessManagerListServer{stream})
}

type JasperProcessManager_ListServer interface {
	Send(*ProcessInfo) error
	grpc.ServerStream
}

type jasperProcessManagerListServer struct {
	grpc.ServerStream
}

func (x *jasperProcessManagerListServer) Send(m *ProcessInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _JasperProcessManager_Group_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TagName)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JasperProcessManagerServer).Group(m, &jasperProcessManagerGroupServer{stream})
}

type JasperProcessManager_GroupServer interface {
	Send(*ProcessInfo) error
	grpc.ServerStream
}

type jasperProcessManagerGroupServer struct {
	grpc.ServerStream
}

func (x *jasperProcessManagerGroupServer) Send(m *ProcessInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _JasperProcessManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JasperProcessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Get(ctx, req.(*JasperProcessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Signal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalProcess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Signal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Signal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Signal(ctx, req.(*SignalProcess))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Clear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Clear(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Close(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_TagProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessTags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).TagProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/TagProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).TagProcess(ctx, req.(*ProcessTags))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ResetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JasperProcessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ResetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ResetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ResetTags(ctx, req.(*JasperProcessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JasperProcessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/GetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).GetTags(ctx, req.(*JasperProcessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_RegisterSignalTriggerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalTriggerParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).RegisterSignalTriggerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/RegisterSignalTriggerID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).RegisterSignalTriggerID(ctx, req.(*SignalTriggerParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Wait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JasperProcessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Wait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Wait",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Wait(ctx, req.(*JasperProcessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Respawn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JasperProcessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Respawn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Respawn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Respawn(ctx, req.(*JasperProcessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_ConfigureCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).ConfigureCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/ConfigureCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).ConfigureCache(ctx, req.(*CacheOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/DownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).DownloadFile(ctx, req.(*DownloadInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_DownloadMongoDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MongoDBDownloadOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).DownloadMongoDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/DownloadMongoDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).DownloadMongoDB(ctx, req.(*MongoDBDownloadOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_GetLogStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).GetLogStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/GetLogStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).GetLogStream(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_GetBuildloggerURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JasperProcessID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).GetBuildloggerURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/GetBuildloggerURLs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).GetBuildloggerURLs(ctx, req.(*JasperProcessID))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_SignalEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JasperProcessManagerServer).SignalEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasper.JasperProcessManager/SignalEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JasperProcessManagerServer).SignalEvent(ctx, req.(*EventName))
	}
	return interceptor(ctx, in, info, handler)
}

func _JasperProcessManager_WriteFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JasperProcessManagerServer).WriteFile(&jasperProcessManagerWriteFileServer{stream})
}

type JasperProcessManager_WriteFileServer interface {
	SendAndClose(*OperationOutcome) error
	Recv() (*WriteFileInfo, error)
	grpc.ServerStream
}

type jasperProcessManagerWriteFileServer struct {
	grpc.ServerStream
}

func (x *jasperProcessManagerWriteFileServer) SendAndClose(m *OperationOutcome) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jasperProcessManagerWriteFileServer) Recv() (*WriteFileInfo, error) {
	m := new(WriteFileInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _JasperProcessManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jasper.JasperProcessManager",
	HandlerType: (*JasperProcessManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ID",
			Handler:    _JasperProcessManager_ID_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _JasperProcessManager_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _JasperProcessManager_Get_Handler,
		},
		{
			MethodName: "Signal",
			Handler:    _JasperProcessManager_Signal_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _JasperProcessManager_Clear_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _JasperProcessManager_Close_Handler,
		},
		{
			MethodName: "TagProcess",
			Handler:    _JasperProcessManager_TagProcess_Handler,
		},
		{
			MethodName: "ResetTags",
			Handler:    _JasperProcessManager_ResetTags_Handler,
		},
		{
			MethodName: "GetTags",
			Handler:    _JasperProcessManager_GetTags_Handler,
		},
		{
			MethodName: "RegisterSignalTriggerID",
			Handler:    _JasperProcessManager_RegisterSignalTriggerID_Handler,
		},
		{
			MethodName: "Wait",
			Handler:    _JasperProcessManager_Wait_Handler,
		},
		{
			MethodName: "Respawn",
			Handler:    _JasperProcessManager_Respawn_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _JasperProcessManager_Status_Handler,
		},
		{
			MethodName: "ConfigureCache",
			Handler:    _JasperProcessManager_ConfigureCache_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _JasperProcessManager_DownloadFile_Handler,
		},
		{
			MethodName: "DownloadMongoDB",
			Handler:    _JasperProcessManager_DownloadMongoDB_Handler,
		},
		{
			MethodName: "GetLogStream",
			Handler:    _JasperProcessManager_GetLogStream_Handler,
		},
		{
			MethodName: "GetBuildloggerURLs",
			Handler:    _JasperProcessManager_GetBuildloggerURLs_Handler,
		},
		{
			MethodName: "SignalEvent",
			Handler:    _JasperProcessManager_SignalEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _JasperProcessManager_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Group",
			Handler:       _JasperProcessManager_Group_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteFile",
			Handler:       _JasperProcessManager_WriteFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "jasper.proto",
}

func init() { proto.RegisterFile("jasper.proto", fileDescriptor_d30110796082ce8e) }

var fileDescriptor_d30110796082ce8e = []byte{
	// 2249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0x5b, 0x53, 0x23, 0xc7,
	0xf5, 0xf7, 0x20, 0xd0, 0xe5, 0x08, 0x89, 0xd9, 0x5e, 0xcc, 0xea, 0x8f, 0x5d, 0x36, 0xff, 0x49,
	0x39, 0x8b, 0x49, 0x99, 0xb5, 0xc1, 0x2e, 0x5f, 0x92, 0x72, 0xa2, 0x45, 0x42, 0x2b, 0x23, 0x24,
	0x32, 0x92, 0x76, 0x93, 0x4d, 0x25, 0xaa, 0x96, 0xa6, 0x25, 0xc6, 0x3b, 0x9a, 0x9e, 0xf4, 0xf4,
	0xb0, 0xe0, 0xaa, 0x3c, 0x27, 0x2f, 0xa9, 0x7c, 0x89, 0x7c, 0x8d, 0xbc, 0x25, 0x9f, 0x2a, 0x2f,
	0xa9, 0xbe, 0x8d, 0x46, 0x5a, 0x60, 0x13, 0x3f, 0xd1, 0xe7, 0xda, 0x67, 0xce, 0x39, 0x7d, 0xce,
	0x0f, 0xc1, 0xe6, 0xf7, 0x38, 0x8e, 0x08, 0x3b, 0x8c, 0x18, 0xe5, 0x14, 0xe5, 0x15, 0xb5, 0xfb,
	0xde, 0x8c, 0xd2, 0x59, 0x40, 0x9e, 0x48, 0xee, 0x38, 0x99, 0x3e, 0x21, 0xf3, 0x88, 0xdf, 0x28,
	0x25, 0xc7, 0x87, 0x7c, 0x87, 0xce, 0x66, 0x84, 0xa1, 0x03, 0x28, 0x06, 0x74, 0x36, 0xe2, 0x37,
	0x11, 0xa9, 0x59, 0x7b, 0xd6, 0x7e, 0xf5, 0x68, 0xeb, 0x50, 0xfb, 0xeb, 0xd0, 0xd9, 0xe0, 0x26,
	0x22, 0x6e, 0x21, 0x50, 0x07, 0x74, 0x0c, 0x65, 0xa1, 0x4b, 0x23, 0xee, 0xd3, 0x30, 0xae, 0xad,
	0xed, 0x59, 0xfb, 0xe5, 0x23, 0x94, 0x51, 0xef, 0x29, 0x89, 0x0b, 0x41, 0x7a, 0x76, 0xfe, 0x6d,
	0x41, 0xa5, 0x97, 0xf0, 0x28, 0xe1, 0x9a, 0x83, 0xf6, 0x41, 0x78, 0x9c, 0x11, 0x16, 0xd7, 0xac,
	0xbd, 0xdc, 0x7e, 0xf9, 0xa8, 0x9a, 0x71, 0x31, 0x23, 0xcc, 0x35, 0x62, 0xf4, 0x18, 0xb6, 0xe2,
	0x24, 0x8a, 0x18, 0x89, 0xe3, 0x11, 0x95, 0x3e, 0xe4, 0xa5, 0x45, 0xb7, 0x6a, 0xd8, 0xca, 0x33,
	0xfa, 0x08, 0x52, 0xce, 0x88, 0x30, 0x46, 0x59, 0x2d, 0x27, 0xf5, 0x2a, 0x86, 0xdb, 0x14, 0x4c,
	0xf4, 0x25, 0xd4, 0x18, 0xf1, 0x7c, 0x46, 0x26, 0x5c, 0xfb, 0x1b, 0x71, 0xaa, 0x0d, 0xd6, 0xa5,
	0xc1, 0xbb, 0x46, 0xae, 0x1c, 0x0f, 0xe8, 0x9b, 0x86, 0x52, 0x5d, 0xd8, 0xe9, 0x88, 0x36, 0x96,
	0x0d, 0xa5, 0xc1, 0x80, 0x2a, 0x7b, 0xe7, 0xaf, 0x39, 0x80, 0x45, 0x62, 0xd0, 0x2f, 0xa0, 0x3a,
	0x4e, 0xa6, 0x53, 0xc2, 0xd2, 0x24, 0x5a, 0x32, 0x89, 0xef, 0x9a, 0x0c, 0x3c, 0x95, 0x52, 0x93,
	0xc7, 0xca, 0x38, 0x4b, 0xa2, 0x33, 0x78, 0x38, 0x4e, 0xfc, 0xc0, 0x53, 0xe9, 0x59, 0xa9, 0xc3,
	0xee, 0xc2, 0x45, 0xaa, 0x62, 0xfc, 0xa0, 0xf1, 0x1b, 0x3c, 0x91, 0x32, 0x8f, 0x4c, 0x71, 0x12,
	0xf0, 0x51, 0xc4, 0xc8, 0xd4, 0xbf, 0x96, 0x29, 0x2b, 0xb9, 0x15, 0xcd, 0xbd, 0x90, 0x4c, 0xf4,
	0x1e, 0x94, 0xa6, 0x7e, 0x40, 0x46, 0x21, 0x9e, 0x13, 0x99, 0xa3, 0x92, 0x5b, 0x14, 0x8c, 0x2e,
	0x9e, 0x13, 0xf4, 0x31, 0xe4, 0xa7, 0x94, 0xcd, 0xb1, 0x4a, 0x42, 0xf5, 0xe8, 0x41, 0xa6, 0x90,
	0xa7, 0x52, 0xe0, 0x6a, 0x05, 0xe4, 0x40, 0xc5, 0x0f, 0x47, 0x73, 0x32, 0xa7, 0xec, 0x66, 0x34,
	0xc1, 0x51, 0x2d, 0xbf, 0x67, 0xed, 0xe7, 0xdc, 0xb2, 0x1f, 0x9e, 0x4b, 0xde, 0x09, 0x8e, 0x44,
	0x76, 0xe2, 0x28, 0x48, 0xc2, 0x57, 0xe9, 0xa7, 0x15, 0x96, 0xb3, 0xd3, 0x97, 0xd2, 0x34, 0x3b,
	0x71, 0x96, 0x44, 0x3f, 0x81, 0x4a, 0x9c, 0xcc, 0xe9, 0x88, 0x84, 0x5e, 0x44, 0xfd, 0x90, 0xd7,
	0x8a, 0x32, 0xda, 0x4d, 0xc1, 0x6c, 0x6a, 0x9e, 0x33, 0x86, 0xca, 0x52, 0x8a, 0xd1, 0x2e, 0x14,
	0x55, 0x92, 0x89, 0x27, 0x6b, 0x51, 0x74, 0x53, 0x5a, 0xc8, 0xbc, 0x84, 0x61, 0xa1, 0x28, 0x93,
	0x9c, 0x73, 0x53, 0x1a, 0xfd, 0x1f, 0x14, 0xe7, 0xf8, 0x7a, 0x14, 0xfb, 0x3f, 0x10, 0x99, 0xb8,
	0x9c, 0x5b, 0x98, 0xe3, 0xeb, 0xbe, 0xff, 0x03, 0x71, 0xfe, 0x61, 0x01, 0x7a, 0xb3, 0x08, 0xe8,
	0x43, 0x28, 0x4f, 0x18, 0xc1, 0x9c, 0x8c, 0x38, 0x89, 0xb9, 0xbe, 0x0c, 0x14, 0x6b, 0x40, 0x62,
	0x8e, 0x6c, 0xc8, 0x25, 0x2c, 0x90, 0x37, 0x95, 0x5c, 0x71, 0x44, 0x3b, 0x90, 0x0f, 0x93, 0xf9,
	0x98, 0x30, 0x7d, 0x85, 0xa6, 0xd0, 0x36, 0x6c, 0x44, 0x97, 0x38, 0x36, 0x05, 0x51, 0x04, 0xaa,
	0x41, 0x41, 0xd6, 0x99, 0x30, 0x59, 0x8e, 0x92, 0x6b, 0x48, 0x84, 0x60, 0x5d, 0xde, 0x99, 0x97,
	0x6c, 0x79, 0x16, 0xda, 0x13, 0x3a, 0x9f, 0xe3, 0xd0, 0x93, 0x59, 0x2e, 0xb9, 0x86, 0x74, 0x7e,
	0x0d, 0x95, 0xa5, 0x44, 0x9b, 0xc0, 0xac, 0x45, 0x60, 0xdb, 0xb0, 0xc1, 0xe9, 0x2b, 0x12, 0xea,
	0x60, 0x15, 0x21, 0x5d, 0x5e, 0xe2, 0x30, 0x24, 0x81, 0xee, 0x25, 0x43, 0x3a, 0xff, 0x5a, 0x87,
	0xca, 0x89, 0xfc, 0x52, 0xe3, 0x13, 0xc1, 0x3a, 0x66, 0x33, 0x35, 0x01, 0x4a, 0xae, 0x3c, 0xa3,
	0x9f, 0xc1, 0x83, 0xd7, 0x94, 0xbd, 0xf2, 0xc3, 0xd9, 0x48, 0xbd, 0x25, 0xca, 0x6e, 0xf4, 0x0d,
	0xb6, 0x16, 0x34, 0x0c, 0x1f, 0x3d, 0x83, 0x32, 0x09, 0xaf, 0x7c, 0x46, 0xc3, 0x39, 0x09, 0x79,
	0x2d, 0x27, 0x27, 0xc9, 0x4f, 0x4d, 0xa7, 0x2c, 0x5d, 0x76, 0xd8, 0x5c, 0x28, 0x36, 0x43, 0xce,
	0x6e, 0xdc, 0xac, 0x29, 0xfa, 0x18, 0x6c, 0x7a, 0x45, 0x18, 0xf3, 0x3d, 0x32, 0xd2, 0x7c, 0x3d,
	0x0d, 0xb6, 0x0c, 0x5f, 0x3b, 0x10, 0x03, 0x89, 0xfb, 0x73, 0x42, 0x13, 0x3e, 0x8a, 0xc9, 0x84,
	0x86, 0x5e, 0x2c, 0x53, 0x9d, 0x73, 0xab, 0x9a, 0xdd, 0x57, 0x5c, 0x99, 0x71, 0x3c, 0x8b, 0x6b,
	0x79, 0xf5, 0x79, 0xe2, 0x8c, 0x3e, 0x07, 0xa0, 0xe1, 0x28, 0x4e, 0x26, 0x13, 0x12, 0x8b, 0xd6,
	0xce, 0x65, 0x5b, 0x7b, 0x29, 0x60, 0xb7, 0x44, 0xc3, 0xbe, 0xd2, 0xd3, 0x56, 0x53, 0xec, 0x07,
	0x09, 0x23, 0xb5, 0xe2, 0x5b, 0xac, 0x4e, 0x95, 0x9e, 0xb6, 0xd2, 0x41, 0xd5, 0x4a, 0x6f, 0xb1,
	0x1a, 0x28, 0x3d, 0xf4, 0x09, 0xe4, 0xf5, 0x50, 0x83, 0xe5, 0x87, 0xb7, 0x34, 0xc0, 0x5d, 0xad,
	0x84, 0x3e, 0x85, 0xed, 0x98, 0xe3, 0xd0, 0xc3, 0xcc, 0x1b, 0xf9, 0xa1, 0x98, 0xa6, 0xe3, 0x1b,
	0x4e, 0xe2, 0x5a, 0x79, 0xcf, 0xda, 0xdf, 0x74, 0x91, 0x91, 0xb5, 0x85, 0xe8, 0xa9, 0x90, 0xec,
	0x7e, 0x0b, 0xf6, 0x6a, 0x2d, 0x44, 0x77, 0xbd, 0x22, 0x37, 0xa6, 0xbb, 0x5e, 0x91, 0x1b, 0xd1,
	0x5d, 0x57, 0x38, 0x48, 0x88, 0xe9, 0x2e, 0x49, 0x7c, 0xb3, 0xf6, 0x95, 0xe5, 0x38, 0x00, 0xed,
	0x86, 0x4b, 0xe2, 0x88, 0x86, 0x31, 0x59, 0xe8, 0x59, 0x19, 0x3d, 0xe7, 0x2f, 0x6b, 0x50, 0xbe,
	0x60, 0x54, 0x24, 0xaf, 0x1d, 0x4e, 0x29, 0xaa, 0xc2, 0x9a, 0xef, 0x69, 0x95, 0x35, 0xdf, 0x13,
	0xf7, 0x45, 0xbe, 0xa7, 0x1f, 0xb4, 0x38, 0xa2, 0x47, 0x50, 0xb8, 0xa4, 0x31, 0x1f, 0xf9, 0x9e,
	0xee, 0xdb, 0xbc, 0x20, 0xdb, 0x9e, 0x68, 0x68, 0x96, 0x84, 0xa1, 0x1f, 0xce, 0x74, 0x43, 0x18,
	0x12, 0x7d, 0x00, 0xa0, 0x0b, 0x39, 0x4d, 0x02, 0xbd, 0x02, 0x32, 0x1c, 0x31, 0x3a, 0x26, 0x74,
	0x1e, 0x05, 0x84, 0x13, 0xf9, 0xea, 0x8a, 0x6e, 0x4a, 0x0b, 0x99, 0x28, 0x8c, 0x27, 0x2a, 0x53,
	0x50, 0x32, 0x43, 0xa3, 0x27, 0x50, 0x30, 0xb3, 0xaf, 0xb8, 0x5c, 0x82, 0xe5, 0xa2, 0x19, 0x2d,
	0x31, 0x9f, 0xc9, 0xb5, 0xcf, 0x47, 0x13, 0xea, 0x91, 0x5a, 0x69, 0xcf, 0xda, 0xdf, 0x70, 0x8b,
	0x82, 0x71, 0x42, 0x3d, 0xe2, 0xd4, 0xa1, 0xda, 0xe7, 0x98, 0x27, 0x71, 0x9a, 0xb2, 0xcc, 0xa7,
	0x5a, 0x4b, 0x9f, 0xba, 0x03, 0x79, 0x3c, 0xe1, 0xfe, 0x15, 0xd1, 0x1b, 0x56, 0x53, 0xce, 0x37,
	0x90, 0x3f, 0xf5, 0x03, 0x4e, 0x18, 0xfa, 0x14, 0xd6, 0xe5, 0x12, 0x50, 0x28, 0xe1, 0x7d, 0x13,
	0x97, 0x92, 0xf6, 0x23, 0x32, 0xf1, 0xa7, 0xfe, 0x04, 0xab, 0xf0, 0xa4, 0xa6, 0x43, 0xa1, 0xd2,
	0xf7, 0x67, 0x21, 0x0e, 0x74, 0x39, 0xd0, 0x17, 0x50, 0x32, 0x95, 0x69, 0xe8, 0xcd, 0xf7, 0xc8,
	0xf8, 0xf9, 0x4e, 0xfe, 0x49, 0xc5, 0xee, 0x42, 0x13, 0x3d, 0x86, 0x7c, 0x2c, 0xfd, 0xc8, 0xd8,
	0x32, 0x08, 0x45, 0x79, 0x8f, 0x5d, 0x2d, 0x76, 0x3e, 0x84, 0xc2, 0x00, 0xcf, 0xe4, 0x6a, 0xba,
	0xbd, 0x37, 0x7e, 0x99, 0xb6, 0xc6, 0x40, 0xbc, 0xc8, 0xf7, 0xa1, 0x14, 0x2d, 0xc5, 0x53, 0x72,
	0x17, 0x8c, 0xf4, 0x0d, 0xaf, 0x2d, 0xde, 0xb0, 0xf3, 0x18, 0xb6, 0x56, 0x02, 0xbd, 0xe3, 0xa6,
	0xdf, 0x83, 0xdd, 0x8b, 0x88, 0x5a, 0x16, 0xbd, 0x84, 0x4f, 0xe8, 0x5c, 0x0e, 0x68, 0xf3, 0xfa,
	0xd5, 0xf4, 0x37, 0xa4, 0x1a, 0xd0, 0xd7, 0x5c, 0x37, 0xbc, 0x3c, 0x2f, 0x57, 0x36, 0xb7, 0x52,
	0xd9, 0xef, 0x61, 0x53, 0xae, 0x18, 0x33, 0x4e, 0x77, 0x20, 0xcf, 0x31, 0x9b, 0x11, 0x6e, 0xca,
	0xaa, 0x28, 0x35, 0x66, 0x27, 0x97, 0xc6, 0xb1, 0x38, 0x8b, 0x30, 0x88, 0xe7, 0xcb, 0xad, 0xa6,
	0xc7, 0xb4, 0x26, 0xc5, 0xa7, 0x78, 0x64, 0x9c, 0x98, 0x6e, 0x57, 0x84, 0xf3, 0x27, 0xd8, 0x39,
	0xa7, 0xe1, 0x8c, 0x36, 0x9e, 0x36, 0xe8, 0xeb, 0x30, 0xa0, 0x38, 0xbd, 0xf5, 0x18, 0x40, 0xae,
	0x18, 0xb1, 0xaf, 0x0d, 0x94, 0xd9, 0x5e, 0xc2, 0x21, 0xe9, 0x90, 0x19, 0x6b, 0x4a, 0x7e, 0x6b,
	0x84, 0x79, 0x1a, 0x92, 0x38, 0x8b, 0x27, 0xc1, 0x48, 0x40, 0x70, 0x4c, 0x62, 0x39, 0xc9, 0x4b,
	0x6e, 0x4a, 0x3b, 0x09, 0x6c, 0x9e, 0xe0, 0xc9, 0x25, 0xc9, 0x6c, 0x6c, 0xcf, 0x8f, 0xf1, 0x38,
	0x58, 0x6c, 0x6c, 0x43, 0xa3, 0x43, 0x78, 0x18, 0xb1, 0x24, 0x24, 0x23, 0x8f, 0x04, 0xf8, 0x26,
	0x9d, 0xd1, 0xea, 0xad, 0x3f, 0x90, 0xa2, 0x86, 0x90, 0x98, 0x31, 0x7d, 0xcf, 0x16, 0xff, 0xb3,
	0x05, 0xd5, 0x3a, 0x9b, 0x5c, 0xfa, 0x57, 0x24, 0x03, 0x99, 0xe2, 0x4b, 0x9a, 0x04, 0xde, 0x88,
	0x5c, 0x73, 0x86, 0x27, 0x66, 0x89, 0x57, 0x14, 0xb7, 0xa9, 0x98, 0x62, 0x8a, 0x6a, 0x54, 0xa4,
	0xda, 0x35, 0x7d, 0xc2, 0xda, 0xdd, 0x0a, 0x32, 0xfa, 0x10, 0xca, 0xaa, 0x58, 0x23, 0x99, 0x16,
	0x55, 0x12, 0x50, 0xac, 0x0b, 0xcc, 0x2f, 0x1d, 0x0a, 0x9b, 0x26, 0xf1, 0x72, 0xa0, 0xbd, 0xb9,
	0x8e, 0x6f, 0x4b, 0xe9, 0xd7, 0xb0, 0x89, 0xd5, 0x7d, 0xaa, 0x3a, 0x39, 0x59, 0x9d, 0x9d, 0x95,
	0x58, 0x4c, 0x7d, 0xca, 0x38, 0xa5, 0x63, 0xc7, 0x87, 0xca, 0x0b, 0xe6, 0x73, 0x72, 0xea, 0x07,
	0x44, 0xde, 0x68, 0xfc, 0x5b, 0x19, 0xff, 0x12, 0x3f, 0x84, 0x5c, 0xec, 0xde, 0x35, 0x39, 0xef,
	0x0d, 0x29, 0xb5, 0x09, 0x9b, 0xcb, 0x1b, 0x2b, 0xae, 0x3c, 0xcb, 0xf1, 0x12, 0x45, 0x24, 0xf4,
	0x74, 0x6b, 0x69, 0xca, 0xf9, 0x08, 0xb6, 0x32, 0x50, 0x69, 0xe8, 0x76, 0x64, 0x7f, 0x24, 0x2c,
	0x48, 0x91, 0x81, 0x38, 0x3b, 0x67, 0x12, 0x45, 0xbb, 0xe4, 0x8f, 0x89, 0x80, 0x2e, 0x8f, 0xd3,
	0x89, 0x7e, 0xcf, 0xfc, 0x10, 0xa3, 0x7e, 0x1b, 0x36, 0x26, 0x34, 0xd1, 0x11, 0xe6, 0x5c, 0x45,
	0x38, 0xc7, 0x50, 0xea, 0xd0, 0x59, 0x9f, 0x33, 0x82, 0xe7, 0xe2, 0xb6, 0x80, 0x2e, 0x70, 0x88,
	0x38, 0x0b, 0x9e, 0x47, 0x43, 0x33, 0x09, 0xe5, 0xd9, 0xf9, 0x9b, 0x05, 0x0f, 0xd5, 0xb8, 0x19,
	0x30, 0x5f, 0xc4, 0x7a, 0x81, 0x19, 0x9e, 0xcb, 0x91, 0x16, 0xfd, 0xd7, 0x23, 0x6d, 0x31, 0x5b,
	0xea, 0xb0, 0x15, 0x67, 0xbd, 0xb5, 0x1b, 0xba, 0x59, 0x1e, 0x2d, 0xcf, 0xb6, 0x54, 0xec, 0xae,
	0xea, 0x3b, 0xff, 0x0f, 0xa5, 0xe6, 0x15, 0x09, 0xf9, 0xdd, 0xe3, 0xee, 0xe0, 0xef, 0x16, 0x14,
	0xf4, 0x7f, 0x71, 0xa8, 0x0a, 0xd0, 0xe9, 0xb5, 0x86, 0xdd, 0xb3, 0x6e, 0xef, 0x45, 0xd7, 0x7e,
	0x07, 0x6d, 0x83, 0xdd, 0xe9, 0xb5, 0x9e, 0x0e, 0xdb, 0x9d, 0x46, 0xa7, 0xd7, 0x6a, 0x35, 0xdd,
	0xe7, 0x47, 0xb6, 0x75, 0x0b, 0xf7, 0xd8, 0x5e, 0xd3, 0xb6, 0x8d, 0xe6, 0x69, 0x7d, 0xd8, 0x19,
	0xd8, 0x39, 0x54, 0x86, 0x42, 0xa7, 0xd7, 0x3a, 0x6d, 0x77, 0x9a, 0xf6, 0xba, 0x16, 0xb6, 0xbb,
	0xcf, 0x9a, 0x6e, 0x7b, 0x60, 0x6f, 0xa0, 0x0a, 0x94, 0x3a, 0xbd, 0x56, 0xff, 0xa2, 0x33, 0xec,
	0x9e, 0xd9, 0x79, 0x64, 0xc3, 0xa6, 0x20, 0x87, 0xe7, 0x3d, 0xa1, 0x75, 0x62, 0x17, 0xd0, 0x16,
	0x94, 0xa5, 0xc1, 0x79, 0xf3, 0xbc, 0xe7, 0xfe, 0xd6, 0x2e, 0x1e, 0xfc, 0x41, 0x16, 0x44, 0x3d,
	0x0b, 0x1d, 0xc1, 0x69, 0xcf, 0x3d, 0xaf, 0x0f, 0x56, 0xa3, 0x55, 0x5c, 0x13, 0x87, 0x85, 0x1e,
	0x40, 0x25, 0xe5, 0x7e, 0xd7, 0xef, 0x75, 0xed, 0x35, 0x84, 0xa0, 0x9a, 0xb2, 0x2e, 0x3a, 0xf5,
	0x76, 0xd7, 0xce, 0x1d, 0xfc, 0x06, 0xb6, 0x6f, 0xdb, 0x52, 0xa8, 0x00, 0xb9, 0x7a, 0xa7, 0x63,
	0xbf, 0x23, 0xbe, 0xc7, 0x1d, 0x76, 0xbb, 0xed, 0x6e, 0xcb, 0xb6, 0xc4, 0xf7, 0x0c, 0x9a, 0xee,
	0x79, 0xbb, 0x5b, 0x1f, 0x34, 0x1b, 0xf6, 0x1a, 0x02, 0xc8, 0x9f, 0xd6, 0xdb, 0x9d, 0x66, 0xc3,
	0xce, 0x09, 0x59, 0x7f, 0x78, 0x72, 0xd2, 0xec, 0xf7, 0x4f, 0x87, 0x1d, 0x7b, 0xfd, 0xe0, 0x77,
	0x50, 0xd0, 0x3b, 0x48, 0xf8, 0x58, 0x84, 0x5b, 0x81, 0x52, 0xea, 0xc3, 0xb6, 0x50, 0x11, 0xd6,
	0xcf, 0xda, 0x9d, 0x8e, 0x72, 0xf6, 0xac, 0xde, 0x6d, 0x0d, 0x2f, 0xec, 0x9c, 0xe0, 0xb6, 0xbb,
	0xed, 0x81, 0xbd, 0x8e, 0x4a, 0xb0, 0x31, 0xec, 0x37, 0xdd, 0xcf, 0xec, 0x0d, 0x73, 0x3c, 0xb2,
	0xf3, 0x07, 0xcf, 0xa1, 0xb2, 0x34, 0x31, 0xc4, 0xb7, 0xd5, 0xdd, 0x93, 0x67, 0xed, 0xe7, 0xcd,
	0xc5, 0x4d, 0x5b, 0x50, 0xd6, 0xbc, 0xfa, 0x70, 0xd0, 0xb3, 0x2d, 0x91, 0x6f, 0xcd, 0x18, 0xd4,
	0xdd, 0xd6, 0x4b, 0x55, 0x3d, 0xcd, 0x79, 0xd9, 0xbe, 0xb0, 0x73, 0x07, 0x9f, 0xc1, 0xd6, 0x4a,
	0x73, 0x89, 0x50, 0xba, 0xbd, 0x6e, 0x53, 0x25, 0xfa, 0xa4, 0xd3, 0xac, 0x77, 0x4d, 0xf8, 0xed,
	0x5e, 0xd7, 0xb6, 0x8e, 0xfe, 0x09, 0xb0, 0xbd, 0xd4, 0xcd, 0xe7, 0x38, 0xc4, 0x33, 0x09, 0x0a,
	0xd6, 0xda, 0x0d, 0xb4, 0x73, 0xa8, 0x7e, 0x6c, 0x38, 0x34, 0x3f, 0x36, 0x1c, 0x36, 0xe7, 0x11,
	0xbf, 0xd9, 0x4d, 0x7f, 0x1b, 0xc8, 0x80, 0xb6, 0xcf, 0x21, 0xaf, 0xa0, 0x0c, 0xba, 0x1d, 0xda,
	0xec, 0x3e, 0x34, 0xec, 0x2c, 0x88, 0xfb, 0x04, 0xd6, 0x3b, 0x7e, 0xcc, 0x51, 0x75, 0x19, 0x76,
	0xdc, 0xaa, 0xfc, 0xa9, 0x85, 0x9e, 0xc0, 0x46, 0x8b, 0xd1, 0x24, 0x42, 0x29, 0x54, 0xd0, 0xb8,
	0xe0, 0x2e, 0x83, 0x63, 0xc8, 0xb5, 0x08, 0x47, 0x77, 0x3d, 0xdd, 0xdb, 0x83, 0xfa, 0x1a, 0xf2,
	0x2a, 0x91, 0x8b, 0x4f, 0x59, 0xc2, 0x3b, 0xbb, 0xb5, 0x14, 0x3f, 0xaf, 0x42, 0x81, 0xaf, 0x61,
	0xe3, 0x24, 0x20, 0x98, 0xdd, 0x99, 0xba, 0xb7, 0x98, 0xd2, 0x98, 0xfc, 0x08, 0xd3, 0x9f, 0x03,
	0x0c, 0xf0, 0xcc, 0xa0, 0xb1, 0xd5, 0x6f, 0x12, 0x90, 0xe8, 0x1e, 0xe3, 0x6f, 0xa1, 0xe4, 0x92,
	0x98, 0x70, 0x89, 0x9c, 0xee, 0x4c, 0xd4, 0xdd, 0xf6, 0x5f, 0x42, 0xa1, 0xf5, 0x36, 0xeb, 0xdb,
	0x42, 0x42, 0x17, 0xf0, 0xc8, 0x25, 0x33, 0x3f, 0x16, 0x0f, 0x78, 0xa5, 0x6f, 0xdf, 0xbb, 0x75,
	0x5a, 0xaa, 0xd1, 0x7c, 0x6f, 0x0a, 0xd7, 0x5f, 0x60, 0x9f, 0xff, 0xc8, 0xaf, 0x10, 0xad, 0x8c,
	0x5f, 0x87, 0xff, 0x63, 0xb3, 0x7c, 0x05, 0x79, 0x85, 0xc5, 0xef, 0xac, 0x5b, 0xba, 0x9b, 0x57,
	0x30, 0xfb, 0xaf, 0xa0, 0x7a, 0x42, 0xc3, 0xa9, 0x3f, 0x4b, 0x18, 0x91, 0x48, 0x08, 0xa5, 0x18,
	0x2b, 0x0b, 0x8c, 0xee, 0x2d, 0x5d, 0x8a, 0x20, 0xc4, 0x4e, 0x5f, 0xd8, 0x67, 0x71, 0xc5, 0x3d,
	0xf6, 0x67, 0xb0, 0x65, 0x34, 0x35, 0x12, 0x44, 0x1f, 0x18, 0xe5, 0xdb, 0xa1, 0xe1, 0x3d, 0xce,
	0xbe, 0x80, 0xcd, 0x16, 0xe1, 0x99, 0x0d, 0x9c, 0xf9, 0xd1, 0x48, 0x6f, 0xf8, 0xdd, 0xec, 0x0f,
	0x49, 0x5a, 0xed, 0x14, 0x50, 0x8b, 0xf0, 0x55, 0xb0, 0x70, 0x67, 0x0d, 0x1e, 0xdd, 0xf2, 0x73,
	0x98, 0xb4, 0xf8, 0x06, 0xca, 0xaa, 0x59, 0xe4, 0xf2, 0x44, 0xe9, 0x4d, 0xe9, 0x2e, 0xbd, 0xff,
	0x09, 0xa4, 0xc0, 0x68, 0xf1, 0xe6, 0x97, 0xb0, 0xd2, 0xdd, 0xd6, 0xfb, 0xd6, 0x53, 0x78, 0x59,
	0xf4, 0x43, 0x4e, 0x58, 0x88, 0x83, 0x71, 0x5e, 0x56, 0xff, 0xf8, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xc9, 0xcb, 0x56, 0x4a, 0xbe, 0x15, 0x00, 0x00,
}

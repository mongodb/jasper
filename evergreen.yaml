command_type: test
stepback: false
ignore:
    - "*.md" # don't schedule tests if a commit only changes markdown files
    - "*.rst" # don't schedule tests if a commit only changes rst files
    - ".github/*" # github CODEOWNERS configuration

#######################################
#         YAML Templates              #
#######################################
variables:
  - &run-build
    # runs a build operation. The task name in evergreen should
    # correspond to a make target for the build operation.
    name: test
    commands:
      - func: run-make
        vars: { target: "${task_name}" }

#######################################
#              Functions              #
#######################################
functions:
  get-project:
    command: git.get_project
    type: system
    params:
      directory: gopath/src/github.com/mongodb/jasper
  run-make:
    command: subprocess.exec
    type: test
    params:
      working_dir: gopath/src/github.com/mongodb/jasper
      binary: make
      args: ["${target}"]
      include_expansions_in_env: ["DISABLE_COVERAGE", "DOCKER_IMAGE", "GO_BIN_PATH", "GOROOT", "RACE_DETECTOR", "SKIP_DOCKER_TESTS"]
      env:
        GOPATH: ${workdir}/gopath
  parse-results:
    command: gotest.parse_files
    type: setup
    params:
      files:
        - "gopath/src/github.com/mongodb/jasper/build/output.*"

#######################################
#                Tasks                #
#######################################
tasks:
  - <<: *run-build
    tags: ["test"]
    name: test-jasper

  - <<: *run-build
    tags: ["test"]
    name: test-cli

  - <<: *run-build
    tags: ["test"]
    name: test-internal-executor

  - <<: *run-build
    tags: ["test"]
    name: test-mock

  - <<: *run-build
    tags: ["test"]
    name: test-options

  - <<: *run-build
    tags: ["test"]
    name: test-remote

  - <<: *run-build
    tags: ["test"]
    name: test-scripting

  - <<: *run-build
    tags: ["report"]
    name: lint-benchmarks

  - <<: *run-build
    tags: ["report"]
    name: lint-cli

  - <<: *run-build
    tags: ["report"]
    name: lint-internal-executor

  - <<: *run-build
    tags: ["report"]
    name: lint-jasper

  - <<: *run-build
    tags: ["report"]
    name: lint-mock

  - <<: *run-build
    tags: ["report"]
    name: lint-options

  - <<: *run-build
    tags: ["report"]
    name: lint-remote-internal

  - <<: *run-build
    tags: ["report"]
    name: lint-remote

  - <<: *run-build
    tags: ["report"]
    name: lint-scripting

  - <<: *run-build
    tags: ["report"]
    name: lint-testutil

  - <<: *run-build
    tags: ["report"]
    name: lint-util

task_groups:
  - name: lint_group
    tasks: [ ".report"]
    max_hosts: 3
    share_processes: true
    setup_group:
      - func: get-project
    teardown_task:
      - func: parse-results
      - func: run-make
        vars: { target: "clean-results" }
  - name: test_group
    tasks: [ ".test"]
    max_hosts: 3
    share_processes: true   # This ensure that the Docker image pulled in the setup_group is shared between tasks.
    setup_group:
      - func: get-project
      - func: run-make
        vars: { target: "docker-setup" }
        variants:
          - ubuntu
    teardown_task:
      - func: parse-results
      - func: run-make
        vars: { target: "clean-results" }
    teardown_group:
      - func: run-make
        vars: { target: "docker-cleanup" }
        variants:
          - ubuntu

#######################################
#           Buildvariants             #
#######################################
buildvariants:
  - name: race-detector
    display_name: Race Detector (Arch Linux)
    expansions:
      DISABLE_COVERAGE: true
      GOROOT: /opt/golang/go1.16
      GO_BIN_PATH: /opt/golang/go1.16/bin/go
      RACE_DETECTOR: true
      SKIP_DOCKER_TESTS: true
    run_on:
      - archlinux-new-small
      - archlinux-new-large
    tasks:
      - name: test_group

  - name: lint
    display_name: Lint (Arch Linux)
    expansions:
      DISABLE_COVERAGE: true
      GOROOT: /opt/golang/go1.16
      GO_BIN_PATH: /opt/golang/go1.16/bin/go
    run_on:
      - archlinux-new-small
      - archlinux-new-large
    tasks: 
      - name: lint_group

  - name: ubuntu
    display_name: Ubuntu 18.04
    expansions:
      DISABLE_COVERAGE: true
      GOROOT: /opt/golang/go1.16
      GO_BIN_PATH: /opt/golang/go1.16/bin/go
      DOCKER_IMAGE: ubuntu
    run_on:
      - ubuntu1804-small
      - ubuntu1804-large
    tasks:
      - name: test_group

  - name: macos
    display_name: macOS
    expansions:
      DISABLE_COVERAGE: true
      GOROOT: /opt/golang/go1.16
      GO_BIN_PATH: /opt/golang/go1.16/bin/go
    run_on:
      - macos-1014
    tasks:
      - name: test_group

  - name: windows
    display_name: Windows
    run_on:
      - windows-64-vs2019-small
      - windows-64-vs2019-large
      - windows-64-vs2017-small
      - windows-64-vs2017-large
    expansions:
      DISABLE_COVERAGE: true
      GOROOT: C:/golang/go1.16
      GO_BIN_PATH: /cygdrive/c/golang/go1.16/bin/go
    tasks:
      - name: test_group
